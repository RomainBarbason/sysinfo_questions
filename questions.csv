Question,Réponse,Matière,,,,
Définis le shell,Le shell est  un programme designé pour permettre à l’utilisateur d’utiliser son ordinateur avec le clavier.,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""cat"" ?",lit et affiche le contenu d'un fichier,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""echo"" ?",affiche une chaine de caractères passée en argument,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""head"" ?",extrait le début d'un fichier,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""tail"" ?",extrait la fin d'un fichier,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""wc"" ?",compte le nombr de caractères et de lignes d'un fichier,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""grep"" ?",extrait d'un fichier les lignes qui contiennent (ou pas) la chaîne passée en argument,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""sort"" ?","trie les lignes d’un fichier texte",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""uniq"" ?",Extrait les lignes uniques ou dupliquées d’un fichier (le fichier doit être trié),Utilisation du langage bash,,,,
"Que fait l'utilitaire ""more"" ?","affiche page par page un fichier",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""gzip"" ?","compresse un fichier
",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""gunzip"" ?","décompresse un fichier
",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""tar"" ?","regroupe plusieurs fichiers dans une archive",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""sed"" ?","édite les caractères d’un flux de données
",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""awk"" ?",Il inclut un petit langage de programmtion. Il permet d'écrire rapidement de nombreux programmes de manipulation de fichiers de texte,Utilisation du langage bash,,,,
"A quoi sert "">"" dans une commande ?","Rediriger la sortie d'une commande sur l'entrée standard (stdin) d'un processus ou d'un fichier. Un seul "">"" overwrite la destination (si c'est un fichier).",Utilisation du langage bash,,,,
"A quoi sert "">>"" dans une commande ?",Rediriger la sortie d'une commande sur l'entrée standard (stdin) d'un processus ou d'un fichier,Utilisation du langage bash,,,,
"A quoi sert ""<"" dans une commande ?",Cela force une commande a prendre un fichier en entrée.,Utilisation du langage bash,,,,
Définis stdin.,"L'entrée standard qui est un flux d’informations par lequel le processus reçoit les données à traiter. Par défaut, l’entrée standard est associée au clavier",Utilisation du langage bash,,,,
Définis stdout.,"Sortie standard qui est un flux d’informations sur lequel le processus écrit le résultat de son traitement. Par défaut, la sortie standard est associée au terminal.",Utilisation du langage bash,,,,
Définis strerr.,"Sortie d’erreur standard qui est un flux de données sur lequel le processus écrira les messages d’erreur éventuels. Par défaut, la sortie d’erreur standard est associée au même terminal que stdout.",Utilisation du langage bash,,,,
"Quand on redirige une sortie vers /dev/null, que faisons-nous ?"," = Mettre a la poubelle. Il accepte
toutes les données en écriture mais celles-ci ne peuvent jamais être relues",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-f file"" est-elle vraie ?","Quand ""file"" existe",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-s file"" est-elle vraie ?","Quand ""file"" n'est pas vide",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-r file"" est-elle vraie ?","Quand ""file"" peut être lu par l'utilisateur qui lance le script",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-w file"" est-elle vraie ?","Quand ""file"" peut être écrit pas l'utilisateur qui lance le script",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-x file"" est-elle vraie ?","Quand ""file"" peut être exécuté par l'utilisateur qui lance le script",Utilisation du langage bash,,,,
Quel est l'opérateur logique qui représente NOT ?,!,Utilisation du langage bash,,,,
Quel est l'opérateur logique qui représente AND ?,-a,Utilisation du langage bash,,,,
Quel est l'opérateur logique qui représente OR ?,-o,Utilisation du langage bash,,,,
"QUESTION SUR ""apostrophes inversés"" A FAIRE",A FAIRE,Utilisation du langage bash,,,,
"Que représente ""*"" ?",N'importe quelle chaine de caractères (y compris la chaine vide),Utilisation du langage bash,,,,
"Que représente ""?"" ?",Représente un caractère unique (pas la chaine vide),Utilisation du langage bash,,,,
Définis DMA.,Direct Access Memory = permet le transfert direct entre le controleur de périphérique et la mémoire principale SANS passer par le système d'exploitation.,Utilisation du langage bash,,,,
Combien de place en bits prend un nibble ?,4 bits,Représentation des données en mémoire,,,,
Combien de place en bits prend un octet/byte ?,8 bits,Représentation des données en mémoire,,,,
Combien de place en bits prend un mot (+-) ?,32 bits,Représentation des données en mémoire,,,,
Combien de place en bits prend un long mot (+-) ?,64 bits,Représentation des données en mémoire,,,,
Qu'est ce qu'un nibble ?,Un caractère en hexadécimal,Représentation des données en mémoire,,,,
Définis langage d'assemblage,Le langage d’assemblage permet d’exprimer de façon symbolique les différentes instructions qu’un processeur doit exécuter. Chaque famille de processeurs en a un.,Langage machine,,,,
Pourquoi il est important de connaitre le langage machine ?,Car c'est un des seuls moyens pour utiliser des opérations atomiques du processeur.,Langage machine,,,,
Définis langage machine,"Langage ayant le plus bas niveau possible, pas compréhensible par un humain.",Langage machine,,,,
Quel est le role de l'assembleur ?,Convertir le langage d'assemblage en langage machine.,Langage machine,,,,
Quels sont le nom des 4 étapes de compilation d'un fichier C ?,1. Prétraitement µ 2. Compilation µ 3. Assemblage µ 4. Editions de liens,Langage C,,,,
"Que fait l'étape ""Prétraitement"" du compilateur C ?",Compilateur lance le préprocesseur qui analyse le fichier source C et remplace les directives de prétraitement avec leur contenu respectif,Langage C,,,,
Donne un exemple de directive de prétraitement,#define µ #include,Langage C,,,,
"Que fait l'étape ""Compilation"" du compilateur C ?",Compilateur convertit le code source prétraité en code objet.,Langage C,,,,
Définis le code objet,Code machine en langage binaire qui contient les informations nécessaires pour créer une version exécutable d'un programme mais qui n'est pas exécutable en tant que tel.,Langage C,,,,
"Que fait l'étape ""Assemblage"" du compilateur C ?",Compilateur assemble le code objet en code machine lisible par une machine.,Langage C,,,,
"Que fait l'étape ""Editions de liens"" du compilateur C ?",Code assembleur est combiné avec les bibliothèque nécessaires pour créer un exécutable qui peut être exécuté.,Langage C,,,,
Qu'est ce que le Linker ?,Programme qui relie les différentes parties d'un programme compilé en un seul fichier exécutable. Relie les objets générés par le compilateur en un seul fichier exécutable.,Langage C,,,,
Dans laquelle des 4 étapes de compilation d'un code C est ce que le Linker intervient ?,"Dans l'étape ""Assemblage"", la troisième étape.",Langage C,,,,
Qu'est ce que le Loader?,Réalise la mise en place de l'espace mémoire du programme. µ S'occupe de charger les librairies dynamiques qui sont nécessaires à l'exécution du programme.,Langage C,,,,
Quand on dit que le Loader met en place l'espace mémoire du programme que veut-on dire ?,Réservation de segments et remplissage de ceux-ci a partir du fichier exécutable.,Langage C,,,,
Donne un exemple de librairie dynamique.,.dll µ .so,Langage C,,,,
Dans laquelle des 4 étapes de compilation d'un code C est ce que le Loader intervient ?,"Dans l'étape ""éditions de liens"", la quatrième étape.",Langage C,,,,
"Quelle est la base du type ""binaire"" et comment définissons-nous un int binaire en C ?",Base 2 µ µ int i = 0b1110010; µ (seulement certains compilateurs),Langage C,,,,
"Quelle est la base du type ""octal"" et comment définissons-nous un int octal en C ?",Base 8 µ int i = 0173;,Langage C,,,,
"Quelle est la base du type ""décimal"" et comment définissons-nous un int décimal en C ?",Base 10 µ int i = 123;,Langage C,,,,
"Quelle est la base du type ""héxadécimal"" et comment définissons-nous un int héxadécimal en C ?",Base 16 µ int i = 0x7b;,Langage C,,,,
"Définis ""entier signé"" en C et donne sa notation en C.","Entier positif ou négatif, se note ""int"" en C.",Langage C,,,,
"Définis ""entier non-signé"" en C et donne sa notation en C.","Entier positif, se note ""unsigned int"" en C.",Langage C,,,,
Quelle est la représentation utilisée par C pour les entiers signés ?,La représentation en complément à 2.,Langage C,,,,
Quel est le processur pour transformer un nombre représenté en complément à 2 en son opposé ?,1. Inverser tous les bits µ 2. Ajouter 1,Langage C,,,,
"Comment note-t-on la manipulation de bits ""not"" ?",~a,Langage C,,,,
"Comment note-t-on la manipulation de bits ""and"" ?",a & b,Langage C,,,,
"Comment note-t-on la manipulation de bits ""or"" ?",a | b,Langage C,,,,
"Comment note-t-on la manipulation de bits ""xor"" ?",a ^ b,Langage C,,,,
Quelles sont les propriétés d'accessibilité d'une variable static déclarée en dehors d'un bloc ?,Accessible à toutes les fonctions du module µ Pas accessible aux autres modules.,Langage C,,,,
Quelles est la propritété d'une variable static déclarée dans un bloc ?,Garde sa valeur d'une invocation de la fonction à l'autre,Langage C,,,,
Ou est-ce que une variable static déclarée dans un bloc elle-t-elle initialisée ?,Dans le segment de données initialisés,Langage C,,,,
Quels sont les 6 zones de l'organisation d'une programme Linux.,1. Segment Texte µ 2. Segment de données initialisées µ 3. Segment de données non-initialisées µ 4. Heap µ 5. Arguments & Variables d'environnement µ 6. Stack,Organisation de la mémoire en C,,,,
"Définis la zone ""Segment texte"".",Partie basse de la mémoire. µ Contient les instructions à exécuter par le processseur. µ Seulement READ. µ Si un programme essaye de modifier il est interrompu. µ Stocke les instructions qui sont exécutées par le microprocesseur. ,Organisation de la mémoire en C,,,,
"Définis la zone ""Segment des données initialisées"".",Ensemble des données et chaînes de caractères utilisées par le programme. µ Contient variables globales µ Contient constantes.,Organisation de la mémoire en C,,,,
"Définis la zone ""Segment des données non-initialisées"".",Réservée pour les variables non-initialisées.,Organisation de la mémoire en C,,,,
"Définis la zone ""Heap"".",Permet de stocker des données et d'y associer un pointeur. µ Un processus peut modifier la taille de son heap. µ Malloc/free alloue/libère de la mémoire ce cette zone.,Organisation de la mémoire en C,,,,
Avec quels 2 appels un processus peut-il modifier la taille de son Heap ?,1. brk µ 2. sbkr,Organisation de la mémoire en C,,,,
"Définis la zone ""Arguments & Variables d'envionnements"".",Partie haute de la mémoire µ Arguments en ligne de commande µ Variables environnement,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement HOSTNAME ?,Nom de la machine sur lequel le programme s'éxécute.,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement SHELL ?,Interpréteur de commande utilisé par défaut pour l'utilisateur courant,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement USER ?,Nom de l'utilisateur courant,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement HOME ?,Répertoire d'accueil de l'utilisateur courant,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement PRINTER ?,Nom de l'imprimante par défaut qui est utilisée par la commande lp,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement PATH ?,Liste ordonnée des répertoires que le système parcourt pour trouver un programme à exécuter.,Organisation de la mémoire en C,,,,
"Définis la zone ""Stack"".","Contient les variables locales et les valeurs de retours des fonctions appelées µ Gérée comme une pile µ Lorsqu'une fonction est applée, nouveau bloc de mémoire alloué pour stocker les informations de contexte de cette fonction sur la pile, ce bloc est libéré quand la fonction retourne µ Taille définie par l'OS µ Stack Overflow = fonction appelle trop de fonctions qui ne retournent (cause de segfault)",Organisation de la mémoire en C,,,,
A quoi servent les algorithmes de gestion de mémoire dynamique ?,Retourne des zones de mémoire libres qui ne se chevauchent pas. µ Recycle la mémoire des zones libérées pour pouvoir y stocker de nouvelles zones réservées.,Gestion de la mémoire dynamique ,,,, 
Quels sont les 4 contraites d'un algorithme de gestion de mémoire dynamique ?,1. Conserver les métadonnées sur les blocs alloués et libérés µ 2. Heap utilisé pour stocker métadonnées 3. Métadonnées intercalées avec les zones de mémoire allouées par l'application µ 4. Zones de mémoire allignées (= padding),Gestion de la mémoire dynamique ,,,,
Quels sont les 3 critères utilisés pour mesurer la qualité d'un algorithme de gestion de mémoire dynamique ?,1. Vitesse d'exécution µ 2. Utilisation de la mémoire µ 3. Localité,Gestion de la mémoire dynamique ,,,,
"Qu'évalue le critère ""Vitesse d'exécution"" ? ",Rapidité & Stabilité,Gestion de la mémoire dynamique ,,,,
"Définis ""fragmentation externe"".",Mesure a quel point l'espace mémoire complet est fragmenté avec de nombreuses zones libres intercalées entre des zones réservées.,Gestion de la mémoire dynamique ,,,,
"Définis ""fragmentation interne"".",Mesure l'espace perdu pour chaque allocation (= padding + espace pour métadonnées).,Gestion de la mémoire dynamique ,,,,
Pourquoi la défragmentation n'est pas une option pour un algorithme de gestion de mémoire dynamique ?,Car les pointeurs vers les zones allouées ont déja été retournés via malloc. Donc plus possible de les changer.,Gestion de la mémoire dynamique ,,,,
"Qu'évalue le critère ""Utilisation de la mémoire"" ? ",A quel point la fragmentation est faible,Gestion de la mémoire dynamique ,,,,
"Définis ""localité temporelle"".",Une même donnée est lue plusieurs fois dans un intervalle de temps court.,Gestion de la mémoire dynamique ,,,,
"Définis ""localité spatiale"".",Si une donnée est lue alors il y a une forte probabilité que la donnée présente dans les octets suivants le soit aussi.,Gestion de la mémoire dynamique ,,,,
"Qu'évalue le critère ""Localité"" ? ",Espaces mémoires réservés par des appels à malloc successifs doivents être le plus proche possible les uns des autres.,Gestion de la mémoire dynamique ,,,,
Que stocke le bloc de métadonnées ?,1. Taille du bloc µ 2. Si le bloc est libre ou pas (drapeau 0/1),Gestion de la mémoire dynamique ,,,,
"En pratique, quel astuce utilisons-nous pour stocker le drapeau des métadonnées et pourquoi est-ce que cela fonctionne ?","Puisqu’on alloue toujours des blocs dont la taille est un multiple de 2, le dernier bit d’une adresse est toujours 0. µ On peut donc utiliser ce bit pour stocker le drapeau.",Gestion de la mémoire dynamique ,,,,
Quelles sont les 3 politiques de placement vues pour les algorithmes de gestion de mémoire dynamique ?,1. First Fit µ 2. Next Fit µ 3. Best Fit,Différentes politiques de placement,,,,
"Comment fonctionne la politique de placement ""First Fit"" ?",Choisir le premier bloc satisfaisant rencontré,Différentes politiques de placement,,,,
"Comment fonctionne la politique de placement ""Next Fit"" ?",Choisir le premier bloc satisfaisant rencontré à partir du dernier bloc alloué,Différentes politiques de placement,,,,
"Comment fonctionne la politique de placement ""Best Fit"" ?",Parcours intégral de la liste pour trouver le bloc qui correspond au mieux à la taille demandée,Différentes politiques de placement,,,,
"Discute de la politique de placement ""First Fit"" en fonction des 3 critères d'un algorithme de gestion de mémoire dynamique.",1. Rapide µ 2. Fragmentation élevée µ 3. Localité faible (pire en pire),Différentes politiques de placement,,,,
"Discute de la politique de placement ""Next Fit"" en fonction des 3 critères d'un algorithme de gestion de mémoire dynamique.","1. Rapide µ 2. Fragmentation très élevée µ 3. Meilleure localité que ""First Fit""",Différentes politiques de placement,,,,
"Discute de la politique de placement ""Best Fit"" en fonction des 3 critères d'un algorithme de gestion de mémoire dynamique.",1. Lent (parcours total) µ 2. Fragmentation optimale µ 3. Localité catastrophique,Différentes politiques de placement,,,,
Quelles sont les 4 statégies d'implémentation des algorithmes de gestion de mémoire dynamique,1. Liste implicite µ 2. Liste explicite µ 3. Liste explicite doublement chaînée µ 4. Utilisation de listes multiples,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que l'implémentation des algorithmes de gestion de mémoire dynamique avec une liste implicite fonctionne-t-elle ?,"Tous les headers de métadonnées lient vers le prochain header de métadonnés de telle manière à ce qu'il est possible d'itérer d'un header à l'autre. Dés qu'un header ayant une taille suffisamment grande est trouvé, il peut être utilisé ne le scindant. Un nouveau header de métadonnés est crée pour définir le bloc libre qui se trouve après le nouveau bloc enregistré.",Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que un algorithme de gestion de mémoire dynamique implémenté avec une liste implicite libère-t-il un bloc ?,On passe le drapeau du bloc a libéré à 0 (bloc libre).,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Quel problème apparait dans les algorithmes de gestion de mémoire dynamique implémenté avec une liste implicite ?,La fausse fragmentation,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Définis le problème de fausse fragmentation.,Plusieurs blocs vides se suivent sans s'unifier pour former un bloc vide plus grand.,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment un algorithme de gestion de mémoire dynamique peut-t-il  pallier au problème de fausse fragmentation ?,1; En utilisant une liste doublement chainée. µ 2. En modifiant la fonction free pour qu'elle soit capable de regrouper des blocs vides lorsqu'elle est invoquée,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que l'implémentation des algorithmes de gestion de mémoire dynamique avec une liste explicite fonctionne-t-elle ?,"Le premier bloc du conteneur contient un lien vers le premier header de métadonnés du premier bloc libre, chaque header de métadonnés d'un bloc libre contient un lien vers le header de métadonnés du prochain bloc libre.",Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que l'implémentation des algorithmes de gestion de mémoire dynamique avec une liste explicite doublement chaînée fonctionne-t-elle ?,"Le premier bloc du conteneur contient un lien vers le premier header de métadonnés du premier bloc libre, chaque header de métadonnés d'un bloc libre contient un lien vers le header de métadonnés du prochain bloc libre ET un lien vers le header de métadonnés du bloc libre précédent.",Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que l'implémentation des algorithmes de gestion de mémoire dynamique avec une utilisation de listes multiples fonctionne-t-elle ?,"On utilise plusieurs listes, une par classe de taille. Chaque classe de taille correspond à une allocation d'un bloc de taille minmum x octets jusqu'a une taille maximum de y octets.",Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Quel est le défaut de l'implémentation des algorithmes de gestion de mémoire dynamique avec une utilisation de listes multiples ?,Les opérations de réservation et de libération de blocs peuvent entrainer des opérations de recherches sur plusieurs listes.,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Laquelle des 4 stratégies d'implémentation des algorithmes de gestion de mémoire dynamique applique-t-elle la politique address-ordered ?,L'implémentation avec des listes multiples,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Quels sont les 2 éléments de l'architecture Von Neumann ?,1. Le processeur µ 2. La mémoire,Architecture Von Neumann,,,,
Quels sont les 2 roles du processeur dans l'architecure Von Neumann ?,1. Unité arithmétique et logique µ 2. Unité de commande,Architecture Von Neumann,,,,
Concrètement que fait l'unité arithmétique et logique.,Réaliser les calculs,Architecture Von Neumann,,,,
Concrètement que fait l'unité de commande.,Décoder les instructions à exécuter lors de l'exécution d'un processus.,Architecture Von Neumann,,,,
Quels sont les 3 éléments stocké par la mémoire dans l'architecture Von Neumann ?,1. Données traitées par le programme µ 2. Instructions du programme µ 3. Données binaires,Architecture Von Neumann,,,,
Combien d'octets font les blocs qui constituent la mémoire dans l'architecture Von Neumann ?,1 octet,Architecture Von Neumann,,,,
Comment est-ce que les blocs sont identifier dans la mémorire dans l'architecture Von Neumann ?,Via des adresses sous la forme de mot binaire,Architecture Von Neumann,,,,
"Si une mémoire permet de stocker 2^k bytes de onnées, combien de bits devra t-elle utiliser au minimum pour représenter l'adresse d'une zone de mémoire ?",k,Architecture Von Neumann,,,,
Quel est un facteur limitant de la capacité totale de mémoire adressable par le processeur ?,Le nombre de bits utilisés pour représenter une adresse de mémoire.,Architecture Von Neumann,,,,
Que peux-tu dire sur les limitations au niveau mémoire d'un processeur utilisant des adresse sur 32 bits ?,Il n'est pas capable physiquement d'adresser plus de 4GB de mémoire.,Architecture Von Neumann,,,,
Quels sont les 2 types de mémoire ?,1. SRAM µ 2. DRAM,Types de mémoire,,,,
Qu'est ce que la mémoire à besoin pour que ces données soient gardés ? ,D'alimentation.,Types de mémoire,,,,
Comment est-ce que la SRAM stocke t-elle un bit d'information ?,Avec un circuit de 4 à 6 transistors (+ qlqs composants electroniques supplémentaires),Types de mémoire,,,,
Quels sont les 2 incovénients de la mémoire SRAM ?,1. Grande consommation électrique µ 2. Nombre important de composants eléctroniques par bit stocké.,Types de mémoire,,,,
Comment est-ce que la DRAM stocke t-elle un bit d'information ?,"En utilisant un condensateur. La présence d'une charge=1, sinon 0. Il est nécessaire de remettre périodiquement la charge.",Types de mémoire,,,,
Pourquoi est-ce que la mémoire DRAM est plus utilisée que la mémoire SRAM ?,Coutent moins chers ==> plus de capacité de mémoire.,Types de mémoire,,,,
Comment est-ce que les adresses en mémoire DRAM sont-elles composées ?,Numéro de colonne + numéro de ligne,Types de mémoire,,,,
Que peux-tu dire à propos de l'écriture de blocs de différentes taille dans une mémoire DRAM ?,Plus rapide d'écrire un grand bloc successif plutôt que d'écrire plusieurs petits blocs séparément.,Types de mémoire,,,,
Qu'est ce que la vitesse d'accesion à la mémore limite t-elle et pourquoi ?,Les processeurs. La fréquence d'horloge des processeurs est bcp plus rapide que la vitesse d'accession à la mémoire (SRAM et DRAM).,Types de mémoire,,,,
Quelles sont les 2 solutions envisagées pour pallier à l'écart de vitesse entre les horloge de processeurs et la vitesse d'accès à la mémoire?,1. Combiner SRAM et DRAM µ 2. Mémoire cache,Types de mémoire,,,,
Pourquoi est-ce que combiner SRAM et DRAM est difficilement faisable en pratique ?,Chaque application devraient déterminer quelles sont les instructions à exécuter et quelles données doivent être placées en SRAM.,Types de mémoire,,,,
Que peux-tu dire sur la vitesse de la mémoire cache ?,Rapide,Mémoire cache,,,,
Que peux-tu dire sur la capacité de la mémoire cache ?,Faible capacité,Mémoire cache,,,,
"Dans un scénario avec un cache et ou le processeur a besoin de lire une donnée, comment se déroule cette demande ?","La mémoire cache reçoit l'adresse demandée et vérifie si la donnée correspondant à cette adresse est présente en mémoire cache, si c'est le cas la mémoire cache renvoie la donnée. Sinon la mémoire cache interroge la mémoire RAM pour la donnée, se met à jour et ensuite répond au processeur.",Mémoire cache,,,,
"Dans un scénario avec un cache et ou le processeur a besoin d'écrire une donnée, comment se déroule cette demande ?",En utilisant la technique du write back.,Mémoire cache,,,,
Définis la technique du write back.,Tout écriture est faite en mémoire cache directement. µ Une donnée modifiée n'est réecrite en mémoire RAM que lorsqu'elle doit être retirée de la mémoire cache.,Mémoire cache,,,,
"Lorsque la technique du write back est utilisée sur un système supportant DMA, qu'est ce que le système d'exploitation doit faire obligatoirement ?",Le Système d'exploitation doit veiller à ce que les données écrites par le processeur en cache aient bien été écrites également en mémoire RAM.,Mémoire cache,,,,
Qu'est ce qu'un registre ?,Une zone de mémoire très rapide sur le processeur. La mémoire la plus rapide sur le processeur.,Les registres,,,,
Pourquoi est-ce que des registres ne peuvent pas être utilisés pour toutes les tâches ?,Car leur nombre est limité.,Les registres,,,,
Quels sont les 8 registres génériques d'un processeur IA32 ?,EBP µ ESP µ EIP µ EAX µ EBX µ ECX µ EDX µ ESI µ EDI µ eflags,L'architecture IA32,,,,
De quoi s'occupent les registres EBP et ESP ?,De la gestion de la pile,L'architecture IA32,,,,
Que contient %esp ?,Le sommet de la pile,L'architecture IA32,,,,
Que contient le registre EIP ?,Il contient l'instruction pointer PC,L'architecture IA32,,,,
Qu'est ce que l'instruction pointer PC ?,L'adresse de l'instruction actuellement executée,L'architecture IA32,,,,
Que contient le registre eflags ?,Il contient les bits drapeau.,L'architecture IA32,,,,
Que veut dire le bit drapeau ZF ?,"Zero Flag, si le résultat de la dernière opération était 0.",L'architecture IA32,,,,
Que veut dire le bit drapeau SF ?,"Sign Flag, si le résultat de la dernière opération était négatif.",L'architecture IA32,,,,
Que veut dire le bit drapeau CF ?,"Carry Flag, si le résultat de la derni!ère instrucion arithmérique non signée nécessitait plus de 32 bits pour être stockée.",L'architecture IA32,,,,
Que veut dire le bit drapeau OF ?,"Overflow Flag, si le résultat de la dernière instruction arithmétique signée a provoqué un dépassement de capacité.",L'architecture IA32,,,,
Quels sont les 5 types de données supportées par un processeur en architecture IA32 ?,char µ short µ int µ long int µ void *,L'architecture IA32,,,,
Quelle est la taille en bytes d'un char ?,1,L'architecture IA32,,,,
Quelle est la taille en bytes d'un short ?,2,L'architecture IA32,,,,
Quelle est la taille en bytes d'un int ?,4,L'architecture IA32,,,,
Quelle est la taille en bytes d'un long int ?,4,L'architecture IA32,,,,
Quelle est la taille en bytes d'un void * ?,4,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un char ?,b,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un short ?,w,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un int ?,1,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un long int ?,1,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un void * ?,1,L'architecture IA32,,,,
"Quels sont les 5 modes utilisés pour spécifier chaque argument d'une instruction ""mov"" ? (autres instructions aussi ?)",1. registre µ 2. adresage immédiat µ 3. adressage absolu µ 4. adressage indirect  µ 5. une base et un déplacement,Les instructions en assembleur,,,,
Définis le mode registre,Pour spécifier que la source/destination est un registre on préfixe le nom du registre par % (%eax),Les instructions en assembleur,,,,
Définis le mode d'adressage immédiat,Pour spécifiquer que la SOURCE est une constante via le préfixe $,Les instructions en assembleur,,,,
Définis le mode d'adressage absolu,L'un des argument est une adresse en mémoire,Les instructions en assembleur,,,,
Définis le mode d'adressage indirect,L'un des argument est une adresse stockée dans un registre.  Exemple: (%eax) ,Les instructions en assembleur,,,,
Définis le mode avec une base et un déplacement,Extension du mode indirect. µ Il permet de lire en mémoire à une adresse qui est obtenue en additionnant un entier positif/négatif à une adresse stockée dans un registre.,Les instructions en assembleur,,,,
"Que fait l'instruction ""mov"" et quelle est sa syntaxe ?","Déplacer des données entre registres ou depuis/vers la mémoire vers/depuis un registre. µ mov src, dest",Les instructions en assembleur,,,,
"Quelle est la limitation de l'instruction ""mov"" ?",Elle ne permet pas de déplacement entre 2 zones de mémoire égales µ (adresse ==> adresse (même si les deux adresses sont stockés dans des registres)),Les instructions en assembleur,,,,
"Quel type de donnée est-ce que suffixe d'instruction ""b"" permet-t-elle de modifier ?",Byte,Les instructions en assembleur,,,,
"Quel type de donnée est-ce que suffixe d'instruction ""w"" permet-t-elle de modifier ?",Mot de 16bits,Les instructions en assembleur,,,,
"Quel type de donnée est-ce que suffixe d'instruction ""l"" permet-t-elle de modifier ?",Mot de 32bits,Les instructions en assembleur,,,,
"Que fait l'instruction ""inc"" et quelle est sa syntaxe ?",Incrémenter une valeur µ inc dest ,Les instructions en assembleur,,,,
"Que fait l'instruction ""dec"" et quelle est sa syntaxe ?",Décremente une valeur µ dec dest ,Les instructions en assembleur,,,,
"Que fait l'instruction ""not"" et quelle est sa syntaxe ?",Inverser bit a bit µ not source/dest,Les instructions en assembleur,,,,
"Que fait l'instruction ""add"" et quelle est sa syntaxe ?","Additionne une valeur (constante) à une adresse/registre µ La valeur à ajouter est définie par le mode d'adressage immédiat µ add $v, %eax",Les instructions en assembleur,,,,
"Que fait l'instruction ""sub"" et quelle est sa syntaxe ?","Soustrait une valeur à une adresse/registre µ La valeur à soustraire est définie par le mode d'adressage absolu (donc par l'adresse qui pointe vers la valeur à soustraire) µ sub 0x0c, %eax",Les instructions en assembleur,,,,
"Que fait l'instruction ""mul"" ?",Permet de multiplier des nombres entiers non-signés.,Les instructions en assembleur,,,,
"Que fait l'instruction ""imul"" ?",Permet de multiplier des nombres entiers signés.,Les instructions en assembleur,,,,
"Que fait l'instruction ""div"" ?",Permet la division de nombres entiers non-signés.,Les instructions en assembleur,,,,
"Que fait l'instruction ""shl"" ?",Décalage logique vers la gauche (Left),Les instructions en assembleur,,,,
"Que fait l'instruction ""shr"" ?",Décalage logique vers la droite (Right),Les instructions en assembleur,,,,
"Que font les instructions ""or""/""xor""/""and"" ?","Ils effectuent l'opération binaire qu'ils représentent bit à bit µ ex: xorl j, %eax",Les instructions en assembleur,,,,
"Que fait l'instruction ""sete"" ?","Récupère ZF = l'opération "" = """,Les instructions en assembleur,,,,
"Que fait l'instruction ""sets"" ?",Récupère SF,Les instructions en assembleur,,,,
"Que fait l'instruction ""setg"" ?","Récupère ~SF & ~ZF = l'opération "" > """,Les instructions en assembleur,,,,
"Que fait l'instruction ""setl"" ?","Récupère SF = l'opération "" <= """,Les instructions en assembleur,,,,
"Que fait l'instruction ""cmp"" ?","Equivalent à l'instruction ""sub"" sans stocker le résultat",Les instructions en assembleur,,,,
"Que fait l'instruction ""test"" ?","Equivalent à l'instruction ""add"" sans stocker le résultat",Les instructions en assembleur,,,,
"Que fait l'instruction ""je"" ?",Jump si ZF (égal),Les instructions en assembleur,,,,
"Que fait l'instruction ""jne"" ?",Jump si not ZF (pas égal),Les instructions en assembleur,,,,
"Que fait l'instruction ""js"" ?",Jump si SF (négatif),Les instructions en assembleur,,,,
"Que fait l'instruction ""jns"" ?",Jump si not SF (pas négatif),Les instructions en assembleur,,,,
"Que fait l'instruction ""jg"" ?",Jump si (SF et ZF) (strictement supérieur) µ prend en compte l'overflow eventuel,Les instructions en assembleur,,,,
"Que fait l'instruction ""jl"" ?",Jump si not (SF et ZF) (pas strictement supérieur) µ prend en compte l'overflow eventuel,Les instructions en assembleur,,,,
"Que fait l'instruction ""jge"" ?",Jump si SF (supérieur ou égal) µ prend en compte l'overflow eventuel,Les instructions en assembleur,,,,
"Que fait l'instruction ""jle"" ?",Jump si not SF (pas supérieur ou égal) µ prend en compte l'overflow eventuel,Les instructions en assembleur,,,,
Que modifient les instructions de jump ?,Modifie le contenu du registre %eip,Les instructions en assembleur,,,,
Dans quel structure de code est-ce que les instruction jump sont très utiles ?,Les boucles for et while,Les instructions en assembleur,,,,
"Que fait l'instruction ""pushl %reg"" ?","Place le contenu de %reg au dessus du sommet de la pile, decrémente le registre %esp de 4 unités.",Les instructions en assembleur,,,,
"Comment peut-on implémenter l'instruction ""pushl %reg"" en utilisant 2 autres instructions ?","subl $4, %esp µ movl %reg, (%esp)",Les instructions en assembleur,,,,
"Que fait l'instruction ""popl %reg"" ?","Retire le mot de 32 bits du sommet de la pile et le place dans %reg, incrémente %esp de 4",Les instructions en assembleur,,,,
"Comment peut-on implémenter l'instruction ""popl %reg"" en utilisant 2 autres instructions ?","movl (%esp), %reg µ addl $4, %esp",Les instructions en assembleur,,,,
"En langage assembleur, à quoi revient l'exécution d'une fonction ?",A modifier le contenu de %eip en placant le pointeur d'instruction au début de la fonction appélée. µ Les arguments de la fonction sont placés sur la pile. µ La valeur de retour de la fonction sont stockée dans le registre %eax.,Les instructions en assembleur,,,,
Quelles sont les 3 causes d'erreur que l'OS peut identifier ?,1. Accès a un segment de mémoire non autorisé µ 2. Utilisation d'opération arithmétique non supportée (div par 0) µ 3. Utilisation en mode utilisateur d'une instruction autorisée seulement en mode protégé,Services de l'OS,,,,
A quel cause d'erreur correspond segfault ?,A un accès à un segment de mémoire non autorisé.,Services de l'OS,,,,
"Définis ""breakpoint""",Adresse d'instruction ou le debugger va s'arrêter pour permettre au développeur d'analyser l'exécution du programme.,Services de l'OS,,,,
Comment est-ce que l'OS gère les accès des applications aux périphériques ?,L'OS fournit aux applications des services d'entrée/sortie au travers d'abstractions facilement manipulables par un programmeur.,Services de l'OS,,,,
Quels sont les 3 objectifs derrière le partage des ressources par l'OS ?,1. Utilisation efficace µ 2. Partage équitable des ressources µ 3. Isolation des ressources utilisées par un processus/utilisateur,Le partage des ressources,,,,
Quels sont les 3 services nécessaires au partage des ressources ?,1. Allocation des ressources µ 2. Contrôle d'usage µ 3. Protection d'accès,Le partage des ressources,,,,
Pourquoi est-ce que l'allocation des ressources est nécessaire au partage des ressources ?,Certaines ressources doivent être accessible de manière exclusive (ex: Clavier) alors que d'autres doivent être accessible de manière partagée (ex: Adaptateur réseau),Le partage des ressources,,,,
Pourquoi est-ce que le controle d'usage est nécessaire au partage des ressources ?,Il faut savoir quel processus/utilisateur accède à quelle quantité de ressources,Le partage des ressources,,,,
Pourquoi est-ce que la protection d'accès est nécessaire au partage des ressources ?,Il faut vérifier si un programme/utilisateur à l'autorisation d'utiliser une ressource,Le partage des ressources,,,,
Que permettent les appels systèmes ?,Ils permettent aux programmes d'interagir avec le système d'exploitation,Appels systèmes,,,,
Que sont les appels systèmes ?,Des fonctions placés dans le Kernel qui sont utilisables par les processus lancés par les utilisateurs.,Appels systèmes,,,,
Qu'est ce que le Kernel ?,Programme spécial qui est toujours présent en mémoire. µ Contient les appels systèmes (fonctions). ,Appels systèmes,,,,
Quels sont les 6 étapes suivies lors du lancement d'une fonction par un programme ?,1. Placer arguments dans la pile µ 2. Sauvegarder sur la pile l'adresse de retour µ 3. Modifier %eip pour que le pointeur pointe vers le début de la fonction appelée µ 4. Récupérer les arguments de la fonction sur la pile µ 5. Sauvegarder le résultat de la fonction dans %eax µ 6. Retourner à instruction qui suit l'appel de la fonction en modifiant %eip,Appels systèmes,,,,
Compare l'exécution suivant l'appel à une fonction et l'exécution suivant l'appel à un appel système.,Les 6 étapes sont les même. µ Le flux d'exécution des instructions d'un appel système doit passer du programme utilisateur au noyau du système d'exploitation.,Appels systèmes,,,,
"Sous Linux, où sont placés les arguments d'un appel système ?","Dans des registres (%ebs, %exc, ...)",Appels systèmes,,,,
Pourquoi les arguments d'un appel système sont-ils placés dans des registres ?,Pour permettre au Kernel d'y accéder facilement.,Appels systèmes,,,,
Que peux-tu dire sur le Kernel lors du démarrage de l'ordinateur ?,"Lorsqu'un ordinateur démarre, le proceseur est placé en mode PROTEGE et le kernel se charge en initialisant plusieurs structures de données et en lancant init() (premier processus système). init() place le processeur en mode UTILISATEUR.",Appels systèmes,,,,
Quels sont les deux moyens possibles pour qu'une instruction du Kernel soit executée ?,1. Interruption matérielle µ 2. Processus utilisateur execute un appel système,Appels systèmes,,,,
Qu'est ce qui arrive lors d'une interruption matérielle ?,Le processeur passe en mode protégé et le Kernel exécute la routine de traitement d'interruption correspondant à l'interruption qui est apparue.,Appels systèmes,,,,
Qu'est ce qui arrive lors d'une appel système ?,Une instruction spéciale démarre (= interruption logicielle) et place le processeur en mode PROTEGE puis elle exécute une instruction placée à une adresse spéciale en mémoire.,Appels systèmes,,,,
Pourquoi est-ce que Unix est developpé avec un système de couches ?,Pour être facilement modulable = µ 1 débug à débugger µ 2. facile à modifier,Structure en couches d'Unix,,,,
Que fait la couche 0 d'Unix ?,"Via le driver de périphériques, elle tansforme des requêtes pour des blocs de données en des commandes bas niveau pour par exemple actionner le bras de lecture du disque.",Structure en couches d'Unix,,,,
Que fait la couche 1 d'Unix ?,"Elle construit une abstraction de volumes de données, correspondant aux disques virtuels (volumes) µ N'a pas connaissance de la notion de fichiers/répertoires",Structure en couches d'Unix,,,,
Que fait la couche 2 d'Unix ?,Elle fait la correspondance entre les blocs de données et les notions haut-niveau que sont les fichiers et les répertoires.,Structure en couches d'Unix,,,,
Quels sont les 2 avantages d'une structure en couches pour un OS ?,"1. Plus facile d'isoler les différentes fonctionnalités et de porter l'OS d'un environnement à un autre (ex: passer d'un SSD à un HDD ne change que la couche 0) µ 2. Plus simple a débugger (test de la couche 0, puis 1, etc)",Structure en couches d'Unix,,,,
Quels sont les 2 inconvénients d'une structure en couches pour un OS ?,1. Les appels systèmes doivent désormais utiliser une succession d'appels entre les couches µ 2. Difficile à structurer clairement car les services systèmes sont souvent interdépendants,Structure en couches d'Unix,,,,
Quels sont les deux éléments que combine la strucure en module ?,"1. Coeur du système d'exploitation contenant les services fondamentaux du système (gestion de processus, gestion de mémoire virtuelle) µ 2. Un certains nombre de modules s'occupant des autres fonctionnalités",Structure en modules de Linux,,,,
Quels sont les 3 avantages d'une structure en modules ?,1. Facile à débugger si les modules ont des interfaces bien définies µ 2.  Facilite l'évolution de l'OS et sa portabilité sur d'autres systèmes µ 3. Résoud le problème d'interdépendances entre les couches,Structure en modules de Linux,,,,
Quel est l'inconvénient d'une structure en modules ?,Problème de fiabilité car il y a une grande quantité de code exécuté en mode protégé au sein du noyau.,Structure en modules de Linux,,,,
Quelle solution peut résoudre l'inconvénient d'une structure en modules ?,"Un micro-noyau, on réduit la taille du noyau au strict minimym et on met le reste des fonctionnalités sous forme de programmes en espace utilisateur.",Structure en modules de Linux,,,,
"Définis ""thread""",Séquence d'instructions qui utilise un bloc de registres.,Utilisation de plusieurs threads,,,,
Qu'est ce qu'est POSIX ?,Librairie qui permet d'utiliser les threads en langage C.,Utilisation de plusieurs threads,,,,
Quelles sont les 4 raisons qui rend les threads importants ?,1. Seule façon de tirer parti de la performance des processeurs multi-coeurs. µ 2. Exécution de plusieurs applications en temps partagé sur un même système. µ 3. Découpage d'une application en composants semi-indépendants. µ 4. Facilite le développement d'applications interactives,Utilisation de plusieurs threads,,,,
Quels sont les deux éléments qu'un thread crée lors de sa création ?,1. Sa propre Stack µ 2. Son propre contexte (= registres),Utilisation de plusieurs threads,,,,
"Définis ""section critique""",Séquence d'instructions qui ne peuvent jamais être exécutées par plusieurs threads simultanément.,Section critique,,,,
Quels sont deux mécanismes utilisés pour gérer les sections critiques ?,1. mutex µ 2. sémaphores,Section critique,,,,
Définis le problème de l'exclusion mutuelle,Trouver un algorithme qui permet de garantir qu'il n'y aura jamais 2 threads qui simultanément exécuteront des instructions de leur section critique.,Section critique,,,,
Comment est ce que les threads fonctionnent sur un processeur mono-thread.,Les différents threads s'entrelacent.,Section critique,,,,
Quel acteur s'occupe de passer le fil d'exécution d'un thread à un autre ?,Le Scheduler,Section critique,,,,
Lors d'un passage du fil d'exécution d'un thread à un autre que se passe t-il ?,Il y a un changemetn de contexte.,Section critique,,,,
"Sur un système UNIX, quels 2 phénomènes peuvent être à l'origine d'un changement de contexte ?",1. Interruption matérielle µ 2. Appel système bloquant,Section critique,,,,
Quelle est la caractéristique d'un appel système non-bloquant ?,Appel système que le système d'exploitation peut exécuter immédiatement. Retourne généralement une valeur qui fait partie des données du système d'exploitation lui-même.,Section critique,,,,
Quelle est la caractéristique d'un appel système bloquant ?,Appel système dont le résultat ne peut pas toujours être fourni immédiatement.,Section critique,,,,
Quels sont les 3 états possibles d'un thread ?,1. Ready µ 2. Running µ 3. Blocked,Section critique,,,,
"Définis l'état ""Ready"" d'un thread",Aucune instruction ne s'exécute sur un processeur mais elles sont prêtes à l'être dés qu'un processeur se libèrera,Section critique,,,,
"Définis l'état ""Running"" d'un thread",Les instructions du threads s'exécutent sur un processeur,Section critique,,,,
"Définis l'état ""Blocked"" d'un thread","Aucune instruction ne s'exécute sur un processeur. Le thread a exécuté un appel système bloquant, le système attend l'information permettant de retourner le résultat de l'appel système.",Section critique,,,,
Qui gère les transitions entre les différents états d'un thread ?,L'OS,Section critique,,,,
Comment est-ce qu'un thread passe de l'état RUNNING à l'état BLOCKED ?,En exécutant un appel système bloquant.,Section critique,,,,
Comment est-ce qu'un thread passe de l'état BLOCKED à l'état RUNNING ?,Cela dépend de l'OS,Section critique,,,,
Comment est-ce qu'un thread passe de l'état RUNNING à l'état READY ?,Cela dépend de l'OS,Section critique,,,,
Que sont les mutex et que permettent-ils ?,Les mutex sont une structure de données permettant de contrôler l'accès à une ressource.,Les mutex,,,,
Quels sont les deux états possibles d'un mutex ?,1. locked µ 2. unlocked,Les mutex,,,,
"Quand un mutex à l'état ""locked"" que se passe-t-il concrètement ?",La ressource est actuellement utilisée,Les mutex,,,,
"Quand un mutex à l'état ""unlocked"" que se passe-t-il concrètement ?",La ressource est accessible sans violer l'exclusion mutuelle,Les mutex,,,,
Que se passe-t-il quand un thread appelle lock() alors que le mutex est réservé ?,Ce thread sera interrompu et placé en état BLOCKED jusqu'à la libération de ce mutex.,Les mutex,,,,
Quels sont les deux éléments qu'un sémaphore contient ?,1. entier non signé ù 2. file de pointeurs vers les threads en attente sur ce sémaphore,Les sémaphores,,,,
Quelle est la différence entre un mutex et un sémaphore au niveau des appels de leurs fonctions ?,Pour un mutex c'est le même thread qui va le lock/unlock. µ Pour un sémaphore les appels aux fonctions wait et post peuvent très bien être effectués par des threads différents.,Les sémaphores,,,,
Quels sont les 4 problèmes de synchronisation étudiés dans le cadre du cours ?,1. Philosophes µ 2. Rendez-vous µ 3. Readers-Writers µ 4. Producteurs-Consommateurs,Les sémaphores,,,,
Décris le problème des philosophes,"Coordonner l’accès de plusieurs threads à plusieurs ressources, chacune de ces ressources devant être utilisée de façon exclusive",Les sémaphores,,,,
Décris le problème de rendez-vous,"Chacun de ces threads travaille en deux phases. Durant la
première phase, tous les threads sont indépendants et peuvent s’exécuter simultanément. Cependant, un thread
ne peut démarrer sa seconde phase que si tous les N threads ont terminé leur première phase.",Les sémaphores,,,,
Décris le problème des readers-writers,Des threads doivent accéder à une base de données. Ou plusieurs readers peuvent s’exécuter simultanément et ou un writer peut accéder au données que si aucune writer et aucun reader n'y accèdent.,Les sémaphores,,,,
Décris le problème des producteurs-consommateurs,Producteurs et consommateurs qui utilisent un même buffer à capacité limitée. Les deux types doivent avancer à leur rythme sans que les producteurs ne bloquent inutilement les consommateurs et inversement.,Les sémaphores,,,,
"Que fait le qualitifcatif de variable ""volatile"" ?",Il force le compilateur ) recharger la variable depuis la mémoire avant chaque utilisation.,"Les variables ""volatile""",,,,
"Quels sont les impacts du qualificatif de variable ""volatile"" ?",1. Augmente le nombre d'accès à la mémoire ==> diminue performances µ 2. Sécurise un code multi-threadé en assurant que la variable est bien à jour pour tous les threads,"Les variables ""volatile""",,,,
"Que fait le qualitifcatif de variable ""__thread"" ?","La variable qualifiée n'est accessible que pour le thread qui l'a créée, chaque thread dispose de sa propre version de la variable",__thread,,,,
"Quand une fonction est qualifiée de ""thread-safe"", qu'est ce que cela veut dire concrètement ?",Cette fonction peut être utilisée de manière concurrente sans aucun risque d'incohérence.,Les fonctions thread-safe,,,,
Qu'est ce qu'est un processus ?,Instance de programme qui est en train d'être exécutée sur un/plusieurs processeurs sous le contrôle de l'OS.,Les processus,,,,
Quels sont les 3 éléments contenu par un processus ?,1. Ensemble d'instructions pour le processeur µ 2. Données stockées en mémoire µ 3. Un contexte / des contextes si multi-threadé,Les processus,,,,
Qu'est ce qu'un contexte contenu dans un processus ?,C'est l'ensemble des données qui permettent de reprendre l'exécution d'un processus qui a été interrompu.,Les processus,,,,
"L'OS maintient certain éléments durant la vie d'un processus, que sont-ils et comment évoluent-ils lors de la vie d'un processus ?",L'OS maintient un certain nombre de structures de données qui sont nécessaires au bon fonctionnement du processus. µ Elles sont créees au démarrage du processus. µ Elles sont mises à jour durant la vie du processus. µ 3. Elles sont supprimées lorsque le processus se termine.,Les processus,,,,
Quelles sont les 4 étapes de la création d'un processus ?,1. Shell localise le fichier exécutable µ 2. Shell demande au noyau de créer un nouveau processus µ 3. Le nouveau processus demande au noyau le chargement de l'exécution du code du fichier programme µ 4. Shell attend la fin de l'exécution du processus créé et récupère sa valeur de retour,Les processus,,,,
"Que fait l'appel système ""fork"" ?",Permet de créer un processus en créant une copie du processus qui l'a appelé.,Les processus,,,,
"Comment appelle-t-on le processus qui a fait l'appel système ""fork"" ?","""père""",Les processus,,,,
"Comment appelle-t-on le processus né d'un appel système ""fork"" ?","""fils""",Les processus,,,,
"Que retourne l'appel système ""fork"" en cas d'erreur et que cela signifie-t-il ?",-1 µ Aucune processus n'est créé,Les processus,,,,
"Que retourne l'appel système ""fork"" au processus PERE en cas d'exécution normale et que cela signifie-t-il ?",une valeur positive = identifiant du processus FILS µ Processus créé !,Les processus,,,,
"Que retourne l'appel système ""fork"" au processus FILS en cas d'exécution normale et que cela signifie-t-il ?",0 µ Processus créé !,Les processus,,,,
"Quand on dit que l'appel système ""fork"" copie un processus, on sous-entend qu'il le copie dans son entièreté, quels sont les éléments des segments de mémoire qui sont donc copiés ?","text, data, heap µ context, stack",Les processus,,,,
"Lors d'un appel système ""fork"" quels éléments ne sont pas copiés dans le processus fils ?",Les autres threads du processus père.,Les processus,,,,
Que peux-tu dire sur la destination d'écriture des processus père et fils ?,Ils écrivent sur les mêmes sorties.,Les processus,,,,
Quels sont les deux moyens pour marquer la fin d'un processus ?,1. return dans la fonction main µ 2. exit,Les processus,,,,
"Que fait la fonction ""atexit"" ?",Elle permet d'enregister des fonctions qui seront appelées lors de l'exécution de la fonction exit,Les processus,,,,
Comment est-ce qu'un processus père peut-il récupérer le statut de son processus fils ?,"Via la l'appel système ""waitpid"".",Les processus,,,,
"Définis l'appel système ""waitpid""","""waitpid"" permet à un processus père de récupérer le statut de son processus fils µ ""waitpid"" est un appel système bloquant",Les processus,,,,
"Quels sont les 3 arguments et leur type de l'appel système ""waitpid"" ? ",1. pid_t pid: id du processus fils (<0 si on considère n'importe quel processus fils) µ 2. int* status : pointer vers un entier qui contiendra le statut retourné par le processus fils µ 3. int options : pas vu au cours,Les processus,,,,
"Comment est-il possible de traduire l'appel système ""wait(p)"" avec l'appel système ""waitpid"" ?","""waitpid(-1, p, 0)""",Les processus,,,,
Est-ce qu'un processus père peut terminer sans la terminaison de ses processus fils dans un cadre d'exécution sans erreur ?,"Non, un processus père DOIT attendre la fin de ses processsus fils dans un cadre d'exécution sans erreur.",Les processus,,,,
"Comment appelle-t-on un processus fils dont le processus père s'est interrompu sans arriver à l'appel système ""waitpid"" ?","On appelle ce processus fils ""orphelin"".",Les processus,,,,
"Lorsqu'un processus fils est déclaré comme ""orphelin"", qu'est ce que le Kernel va faire ?",Il va modifier les structures de l'orphelin pour que son père soit le processus dont l'indentifiant est 1 = processus init,Les processus,,,,
Comment appelle-t-on un processus fils qui a terminé mais dont la valeur de retour n'a pas encore été récupérée par son processus père ?,"On appelle ce processus fils ""zombie"".",Les processus,,,,
"Lorsqu'un processus fils est déclaré comme ""zombie"", qu'est ce que le Kernel va faire ?",Il libère l'ensemble des ressources associées au processus fils et ne conserve qu'une petite structure de données.,Les processus,,,,
"Pourquoi est-ce qu'il est préférable d'éviter les processus fils ""zombie"" ?","Car même si le Kernel vient libérer la majorité des ressources associées à ces processus fils ""zombie"" ils consomment quand même un peu de ressources.",Les processus,,,,
"Que fait l'appel système ""execve"" ?",Il permet l'exécution d'un programme. L'image en mémoire du processus qui exécute execve est remplacé par l'image de l'exécutable passée en argument à execve et son exécution démarre à sa fonction main.,Les processus,,,,
"Quels sont les 3 arguments de l'appel système ""execve"" ?",1. const char *path : nom complet fichier du exécutable qui doit être lancé µ 2. char *const argv[] : arguments à passer à l'exécutable µ 3. char *const envp[] : pointer vers l'environnement qui sera nécessaire à l'exécution du programme,Les processus,,,,
"Quand un processus multi-threadé exécute l'appel système ""execve"", qu'arrive-t-il à ses threads ?",Ils sont immédiatement supprimés.,Les processus,,,,
Qu'est ce que la table des processus ?,C'est une liste complète des processus en cours d'exécution.,Les processus,,,,
Quels sont les 3 moyens de consulter la table des processus ?,1. ps µ 2. top µ 3. pstree,Les processus,,,,