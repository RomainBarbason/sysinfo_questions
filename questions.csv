Question,Réponse,Matière,,,,
Définis le shell,Le shell est un programme designé pour permettre à l’utilisateur d’utiliser son ordinateur avec le clavier.,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""cat"" ?",lit et affiche le contenu d'un fichier,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""echo"" ?",affiche une chaine de caractères passée en argument,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""head"" ?",extrait le début d'un fichier,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""tail"" ?",extrait la fin d'un fichier,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""wc"" ?",compte le nombr de caractères et de lignes d'un fichier,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""grep"" ?",extrait d'un fichier les lignes qui contiennent (ou pas) la chaîne passée en argument,Utilisation du langage bash,,,,
"Que fait l'utilitaire ""sort"" ?","trie les lignes d’un fichier texte",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""uniq"" ?",Extrait les lignes uniques ou dupliquées d’un fichier (le fichier doit être trié),Utilisation du langage bash,,,,
"Que fait l'utilitaire ""more"" ?","affiche page par page un fichier",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""gzip"" ?","compresse un fichier
",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""gunzip"" ?","décompresse un fichier
",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""tar"" ?","regroupe plusieurs fichiers dans une archive",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""sed"" ?","édite les caractères d’un flux de données
",Utilisation du langage bash,,,,
"Que fait l'utilitaire ""awk"" ?",Il inclut un petit langage de programmtion. Il permet d'écrire rapidement de nombreux programmes de manipulation de fichiers de texte,Utilisation du langage bash,,,,
"A quoi sert "">"" dans une commande ?","Rediriger la sortie d'une commande sur l'entrée standard (stdin) d'un processus ou d'un fichier. Un seul "">"" overwrite la destination (si c'est un fichier).",Utilisation du langage bash,,,,
"A quoi sert "">>"" dans une commande ?",Rediriger la sortie d'une commande sur l'entrée standard (stdin) d'un processus ou d'un fichier,Utilisation du langage bash,,,,
"A quoi sert ""<"" dans une commande ?",Cela force une commande a prendre un fichier en entrée.,Utilisation du langage bash,,,,
Définis stdin.,"L'entrée standard qui est un flux d’informations par lequel le processus reçoit les données à traiter. Par défaut, l’entrée standard est associée au clavier",Utilisation du langage bash,,,,
Définis stdout.,"Sortie standard qui est un flux d’informations sur lequel le processus écrit le résultat de son traitement. Par défaut, la sortie standard est associée au terminal.",Utilisation du langage bash,,,,
Définis strerr.,"Sortie d’erreur standard qui est un flux de données sur lequel le processus écrira les messages d’erreur éventuels. Par défaut, la sortie d’erreur standard est associée au même terminal que stdout.",Utilisation du langage bash,,,,
"Quand on redirige une sortie vers /dev/null, que faisons-nous ?"," = Mettre a la poubelle. Il accepte
toutes les données en écriture mais celles-ci ne peuvent jamais être relues",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-f file"" est-elle vraie ?","Quand ""file"" existe",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-s file"" est-elle vraie ?","Quand ""file"" n'est pas vide",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-r file"" est-elle vraie ?","Quand ""file"" peut être lu par l'utilisateur qui lance le script",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-w file"" est-elle vraie ?","Quand ""file"" peut être écrit pas l'utilisateur qui lance le script",Utilisation du langage bash,,,,
"Quand est-ce que la condition ""-x file"" est-elle vraie ?","Quand ""file"" peut être exécuté par l'utilisateur qui lance le script",Utilisation du langage bash,,,,
Quel est l'opérateur logique qui représente NOT ?,!,Utilisation du langage bash,,,,
Quel est l'opérateur logique qui représente AND ?,-a,Utilisation du langage bash,,,,
Quel est l'opérateur logique qui représente OR ?,-o,Utilisation du langage bash,,,,
"QUESTION SUR ""apostrophes inversés"" A FAIRE",A FAIRE,Utilisation du langage bash,,,,
"Que représente ""*"" ?",N'importe quelle chaine de caractères (y compris la chaine vide),Utilisation du langage bash,,,,
"Que représente ""?"" ?",Représente un caractère unique (pas la chaine vide),Utilisation du langage bash,,,,
Définis DMA.,Direct Access Memory = permet le transfert direct entre le controleur de périphérique et la mémoire principale SANS passer par le système d'exploitation.,Utilisation du langage bash,,,,
Combien de place en bits prend un nibble ?,4 bits,Représentation des données en mémoire,,,,
Combien de place en bits prend un octet/byte ?,8 bits,Représentation des données en mémoire,,,,
Combien de place en bits prend un mot (+-) ?,32 bits,Représentation des données en mémoire,,,,
Combien de place en bits prend un long mot (+-) ?,64 bits,Représentation des données en mémoire,,,,
Qu'est ce qu'un nibble ?,Un caractère en hexadécimal,Représentation des données en mémoire,,,,
Définis langage d'assemblage,Le langage d’assemblage permet d’exprimer de façon symbolique les différentes instructions qu’un processeur doit exécuter. Chaque famille de processeurs en a un.,Langage machine,,,,
Pourquoi il est important de connaitre le langage machine ?,Car c'est un des seuls moyens pour utiliser des opérations atomiques du processeur.,Langage machine,,,,
Définis langage machine,"Langage ayant le plus bas niveau possible, pas compréhensible par un humain.",Langage machine,,,,
Quel est le role de l'assembleur ?,Convertir le langage d'assemblage en langage machine.,Langage machine,,,,
Quels sont le nom des 4 étapes de compilation d'un fichier C ?,1. Prétraitement µ 2. Compilation µ 3. Assemblage µ 4. Editions de liens,Langage C,,,,
"Que fait l'étape ""Prétraitement"" du compilateur C ?",Compilateur lance le préprocesseur qui analyse le fichier source C et remplace les directives de prétraitement avec leur contenu respectif,Langage C,,,,
Donne un exemple de directive de prétraitement,#define µ #include,Langage C,,,,
"Que fait l'étape ""Compilation"" du compilateur C ?",Compilateur convertit le code source prétraité en code objet.,Langage C,,,,
Définis le code objet,Code machine en langage binaire qui contient les informations nécessaires pour créer une version exécutable d'un programme mais qui n'est pas exécutable en tant que tel.,Langage C,,,,
"Que fait l'étape ""Assemblage"" du compilateur C ?",Compilateur assemble le code objet en code machine lisible par une machine.,Langage C,,,,
"Que fait l'étape ""Editions de liens"" du compilateur C ?",Code assembleur est combiné avec les bibliothèque nécessaires pour créer un exécutable qui peut être exécuté.,Langage C,,,,
Qu'est ce que le Linker ?,Programme qui relie les différentes parties d'un programme compilé en un seul fichier exécutable. Relie les objets générés par le compilateur en un seul fichier exécutable.,Langage C,,,,
Dans laquelle des 4 étapes de compilation d'un code C est ce que le Linker intervient ?,"Dans l'étape ""Assemblage"", la troisième étape.",Langage C,,,,
Qu'est ce que le Loader?,Réalise la mise en place de l'espace mémoire du programme. µ S'occupe de charger les librairies dynamiques qui sont nécessaires à l'exécution du programme.,Langage C,,,,
Quand on dit que le Loader met en place l'espace mémoire du programme que veut-on dire ?,Réservation de segments et remplissage de ceux-ci a partir du fichier exécutable.,Langage C,,,,
Donne un exemple de librairie dynamique.,.dll µ .so,Langage C,,,,
Dans laquelle des 4 étapes de compilation d'un code C est ce que le Loader intervient ?,"Dans l'étape ""éditions de liens"", la quatrième étape.",Langage C,,,,
"Quelle est la base du type ""binaire"" et comment définissons-nous un int binaire en C ?",Base 2 µ µ int i = 0b1110010; µ (seulement certains compilateurs),Langage C,,,,
"Quelle est la base du type ""octal"" et comment définissons-nous un int octal en C ?",Base 8 µ int i = 0173;,Langage C,,,,
"Quelle est la base du type ""décimal"" et comment définissons-nous un int décimal en C ?",Base 10 µ int i = 123;,Langage C,,,,
"Quelle est la base du type ""héxadécimal"" et comment définissons-nous un int héxadécimal en C ?",Base 16 µ int i = 0x7b;,Langage C,,,,
"Définis ""entier signé"" en C et donne sa notation en C.","Entier positif ou négatif, se note ""int"" en C.",Langage C,,,,
"Définis ""entier non-signé"" en C et donne sa notation en C.","Entier positif, se note ""unsigned int"" en C.",Langage C,,,,
Quelle est la représentation utilisée par C pour les entiers signés ?,La représentation en complément à 2.,Langage C,,,,
Quel est le processur pour transformer un nombre représenté en complément à 2 en son opposé ?,1. Inverser tous les bits µ 2. Ajouter 1,Langage C,,,,
"Comment note-t-on la manipulation de bits ""not"" ?",~a,Langage C,,,,
"Comment note-t-on la manipulation de bits ""and"" ?",a & b,Langage C,,,,
"Comment note-t-on la manipulation de bits ""or"" ?",a | b,Langage C,,,,
"Comment note-t-on la manipulation de bits ""xor"" ?",a ^ b,Langage C,,,,
Quelles sont les propriétés d'accessibilité d'une variable static déclarée en dehors d'un bloc ?,Accessible à toutes les fonctions du module µ Pas accessible aux autres modules.,Langage C,,,,
Quelles est la propritété d'une variable static déclarée dans un bloc ?,Garde sa valeur d'une invocation de la fonction à l'autre,Langage C,,,,
Ou est-ce que une variable static déclarée dans un bloc elle-t-elle initialisée ?,Dans le segment de données initialisés,Langage C,,,,
Quels sont les 6 zones de l'organisation d'une programme Linux.,1. Segment Texte µ 2. Segment de données initialisées µ 3. Segment de données non-initialisées µ 4. Heap µ 5. Arguments & Variables d'environnement µ 6. Stack,Organisation de la mémoire en C,,,,
"Définis la zone ""Segment texte"".",Partie basse de la mémoire. µ Contient les instructions à exécuter par le processseur. µ Seulement READ. µ Si un programme essaye de modifier il est interrompu. µ Stocke les instructions qui sont exécutées par le microprocesseur. ,Organisation de la mémoire en C,,,,
"Définis la zone ""Segment des données initialisées"".",Ensemble des données et chaînes de caractères utilisées par le programme. µ Contient variables globales µ Contient constantes.,Organisation de la mémoire en C,,,,
"Définis la zone ""Segment des données non-initialisées"".",Réservée pour les variables non-initialisées.,Organisation de la mémoire en C,,,,
"Définis la zone ""Heap"".",Permet de stocker des données et d'y associer un pointeur. µ Un processus peut modifier la taille de son heap. µ Malloc/free alloue/libère de la mémoire ce cette zone.,Organisation de la mémoire en C,,,,
Avec quels 2 appels un processus peut-il modifier la taille de son Heap ?,1. brk µ 2. sbkr,Organisation de la mémoire en C,,,,
"Définis la zone ""Arguments & Variables d'envionnements"".",Partie haute de la mémoire µ Arguments en ligne de commande µ Variables environnement,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement HOSTNAME ?,Nom de la machine sur lequel le programme s'éxécute.,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement SHELL ?,Interpréteur de commande utilisé par défaut pour l'utilisateur courant,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement USER ?,Nom de l'utilisateur courant,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement HOME ?,Répertoire d'accueil de l'utilisateur courant,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement PRINTER ?,Nom de l'imprimante par défaut qui est utilisée par la commande lp,Organisation de la mémoire en C,,,,
Que stocke la variable d'environnement PATH ?,Liste ordonnée des répertoires que le système parcourt pour trouver un programme à exécuter.,Organisation de la mémoire en C,,,,
"Définis la zone ""Stack"".","Contient les variables locales et les valeurs de retours des fonctions appelées µ Gérée comme une pile µ Lorsqu'une fonction est applée, nouveau bloc de mémoire alloué pour stocker les informations de contexte de cette fonction sur la pile, ce bloc est libéré quand la fonction retourne µ Taille définie par l'OS µ Stack Overflow = fonction appelle trop de fonctions qui ne retournent (cause de segfault)",Organisation de la mémoire en C,,,,
A quoi servent les algorithmes de gestion de mémoire dynamique ?,Retourne des zones de mémoire libres qui ne se chevauchent pas. µ Recycle la mémoire des zones libérées pour pouvoir y stocker de nouvelles zones réservées.,Gestion de la mémoire dynamique ,,,, 
Quels sont les 4 contraites d'un algorithme de gestion de mémoire dynamique ?,1. Conserver les métadonnées sur les blocs alloués et libérés µ 2. Heap utilisé pour stocker métadonnées 3. Métadonnées intercalées avec les zones de mémoire allouées par l'application µ 4. Zones de mémoire allignées (= padding),Gestion de la mémoire dynamique ,,,,
Quels sont les 3 critères utilisés pour mesurer la qualité d'un algorithme de gestion de mémoire dynamique ?,1. Vitesse d'exécution µ 2. Utilisation de la mémoire µ 3. Localité,Gestion de la mémoire dynamique ,,,,
"Qu'évalue le critère ""Vitesse d'exécution"" ? ",Rapidité & Stabilité,Gestion de la mémoire dynamique ,,,,
"Définis ""fragmentation externe"".",Mesure a quel point l'espace mémoire complet est fragmenté avec de nombreuses zones libres intercalées entre des zones réservées.,Gestion de la mémoire dynamique ,,,,
"Définis ""fragmentation interne"".",Mesure l'espace perdu pour chaque allocation (= padding + espace pour métadonnées).,Gestion de la mémoire dynamique ,,,,
Pourquoi la défragmentation n'est pas une option pour un algorithme de gestion de mémoire dynamique ?,Car les pointeurs vers les zones allouées ont déja été retournés via malloc. Donc plus possible de les changer.,Gestion de la mémoire dynamique ,,,,
"Qu'évalue le critère ""Utilisation de la mémoire"" ? ",A quel point la fragmentation est faible,Gestion de la mémoire dynamique ,,,,
"Définis ""localité temporelle"".",Une même donnée est lue plusieurs fois dans un intervalle de temps court.,Gestion de la mémoire dynamique ,,,,
"Définis ""localité spatiale"".",Si une donnée est lue alors il y a une forte probabilité que la donnée présente dans les octets suivants le soit aussi.,Gestion de la mémoire dynamique ,,,,
"Qu'évalue le critère ""Localité"" ? ",Espaces mémoires réservés par des appels à malloc successifs doivents être le plus proche possible les uns des autres.,Gestion de la mémoire dynamique ,,,,
Que stocke le bloc de métadonnées ?,1. Taille du bloc µ 2. Si le bloc est libre ou pas (drapeau 0/1),Gestion de la mémoire dynamique ,,,,
"En pratique, quel astuce utilisons-nous pour stocker le drapeau des métadonnées et pourquoi est-ce que cela fonctionne ?","Puisqu’on alloue toujours des blocs dont la taille est un multiple de 2, le dernier bit d’une adresse est toujours 0. µ On peut donc utiliser ce bit pour stocker le drapeau.",Gestion de la mémoire dynamique ,,,,
Quelles sont les 3 politiques de placement vues pour les algorithmes de gestion de mémoire dynamique ?,1. First Fit µ 2. Next Fit µ 3. Best Fit,Différentes politiques de placement,,,,
"Comment fonctionne la politique de placement ""First Fit"" ?",Choisir le premier bloc satisfaisant rencontré,Différentes politiques de placement,,,,
"Comment fonctionne la politique de placement ""Next Fit"" ?",Choisir le premier bloc satisfaisant rencontré à partir du dernier bloc alloué,Différentes politiques de placement,,,,
"Comment fonctionne la politique de placement ""Best Fit"" ?",Parcours intégral de la liste pour trouver le bloc qui correspond au mieux à la taille demandée,Différentes politiques de placement,,,,
"Discute de la politique de placement ""First Fit"" en fonction des 3 critères d'un algorithme de gestion de mémoire dynamique.",1. Rapide µ 2. Fragmentation élevée µ 3. Localité faible (pire en pire),Différentes politiques de placement,,,,
"Discute de la politique de placement ""Next Fit"" en fonction des 3 critères d'un algorithme de gestion de mémoire dynamique.","1. Rapide µ 2. Fragmentation très élevée µ 3. Meilleure localité que ""First Fit""",Différentes politiques de placement,,,,
"Discute de la politique de placement ""Best Fit"" en fonction des 3 critères d'un algorithme de gestion de mémoire dynamique.",1. Lent (parcours total) µ 2. Fragmentation optimale µ 3. Localité catastrophique,Différentes politiques de placement,,,,
Quelles sont les 4 statégies d'implémentation des algorithmes de gestion de mémoire dynamique,1. Liste implicite µ 2. Liste explicite µ 3. Liste explicite doublement chaînée µ 4. Utilisation de listes multiples,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que l'implémentation des algorithmes de gestion de mémoire dynamique avec une liste implicite fonctionne-t-elle ?,"Tous les headers de métadonnées lient vers le prochain header de métadonnés de telle manière à ce qu'il est possible d'itérer d'un header à l'autre. Dés qu'un header ayant une taille suffisamment grande est trouvé, il peut être utilisé ne le scindant. Un nouveau header de métadonnés est crée pour définir le bloc libre qui se trouve après le nouveau bloc enregistré.",Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que un algorithme de gestion de mémoire dynamique implémenté avec une liste implicite libère-t-il un bloc ?,On passe le drapeau du bloc a libéré à 0 (bloc libre).,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Quel problème apparait dans les algorithmes de gestion de mémoire dynamique implémenté avec une liste implicite ?,La fausse fragmentation,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Définis le problème de fausse fragmentation.,Plusieurs blocs vides se suivent sans s'unifier pour former un bloc vide plus grand.,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment un algorithme de gestion de mémoire dynamique peut-t-il  pallier au problème de fausse fragmentation ?,1; En utilisant une liste doublement chainée. µ 2. En modifiant la fonction free pour qu'elle soit capable de regrouper des blocs vides lorsqu'elle est invoquée,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que l'implémentation des algorithmes de gestion de mémoire dynamique avec une liste explicite fonctionne-t-elle ?,"Le premier bloc du conteneur contient un lien vers le premier header de métadonnés du premier bloc libre, chaque header de métadonnés d'un bloc libre contient un lien vers le header de métadonnés du prochain bloc libre.",Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que l'implémentation des algorithmes de gestion de mémoire dynamique avec une liste explicite doublement chaînée fonctionne-t-elle ?,"Le premier bloc du conteneur contient un lien vers le premier header de métadonnés du premier bloc libre, chaque header de métadonnés d'un bloc libre contient un lien vers le header de métadonnés du prochain bloc libre ET un lien vers le header de métadonnés du bloc libre précédent.",Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Comment est-ce que l'implémentation des algorithmes de gestion de mémoire dynamique avec une utilisation de listes multiples fonctionne-t-elle ?,"On utilise plusieurs listes, une par classe de taille. Chaque classe de taille correspond à une allocation d'un bloc de taille minmum x octets jusqu'a une taille maximum de y octets.",Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Quel est le défaut de l'implémentation des algorithmes de gestion de mémoire dynamique avec une utilisation de listes multiples ?,Les opérations de réservation et de libération de blocs peuvent entrainer des opérations de recherches sur plusieurs listes.,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Laquelle des 4 stratégies d'implémentation des algorithmes de gestion de mémoire dynamique applique-t-elle la politique address-ordered ?,L'implémentation avec des listes multiples,Stratégies pour les algorithmes de gestion de mémoire dynamique,,,,
Quels sont les 2 éléments de l'architecture Von Neumann ?,1. Le processeur µ 2. La mémoire,Architecture Von Neumann,,,,
Quels sont les 2 roles du processeur dans l'architecure Von Neumann ?,1. Unité arithmétique et logique µ 2. Unité de commande,Architecture Von Neumann,,,,
Concrètement que fait l'unité arithmétique et logique.,Réaliser les calculs,Architecture Von Neumann,,,,
Concrètement que fait l'unité de commande.,Décoder les instructions à exécuter lors de l'exécution d'un processus.,Architecture Von Neumann,,,,
Quels sont les 3 éléments stocké par la mémoire dans l'architecture Von Neumann ?,1. Données traitées par le programme µ 2. Instructions du programme µ 3. Données binaires,Architecture Von Neumann,,,,
Combien d'octets font les blocs qui constituent la mémoire dans l'architecture Von Neumann ?,1 octet,Architecture Von Neumann,,,,
Comment est-ce que les blocs sont identifier dans la mémorire dans l'architecture Von Neumann ?,Via des adresses sous la forme de mot binaire,Architecture Von Neumann,,,,
"Si une mémoire permet de stocker 2^k bytes de onnées, combien de bits devra t-elle utiliser au minimum pour représenter l'adresse d'une zone de mémoire ?",k,Architecture Von Neumann,,,,
Quel est un facteur limitant de la capacité totale de mémoire adressable par le processeur ?,Le nombre de bits utilisés pour représenter une adresse de mémoire.,Architecture Von Neumann,,,,
Que peux-tu dire sur les limitations au niveau mémoire d'un processeur utilisant des adresse sur 32 bits ?,Il n'est pas capable physiquement d'adresser plus de 4GB de mémoire.,Architecture Von Neumann,,,,
Quels sont les 2 types de mémoire ?,1. SRAM µ 2. DRAM,Types de mémoire,,,,
Qu'est ce que la mémoire à besoin pour que ces données soient gardés ? ,D'alimentation.,Types de mémoire,,,,
Comment est-ce que la SRAM stocke t-elle un bit d'information ?,Avec un circuit de 4 à 6 transistors (+ qlqs composants electroniques supplémentaires),Types de mémoire,,,,
Quels sont les 2 incovénients de la mémoire SRAM ?,1. Grande consommation électrique µ 2. Nombre important de composants eléctroniques par bit stocké.,Types de mémoire,,,,
Comment est-ce que la DRAM stocke t-elle un bit d'information ?,"En utilisant un condensateur. La présence d'une charge=1, sinon 0. Il est nécessaire de remettre périodiquement la charge.",Types de mémoire,,,,
Pourquoi est-ce que la mémoire DRAM est plus utilisée que la mémoire SRAM ?,Coutent moins chers ==> plus de capacité de mémoire.,Types de mémoire,,,,
Comment est-ce que les adresses en mémoire DRAM sont-elles composées ?,Numéro de colonne + numéro de ligne,Types de mémoire,,,,
Que peux-tu dire à propos de l'écriture de blocs de différentes taille dans une mémoire DRAM ?,Plus rapide d'écrire un grand bloc successif plutôt que d'écrire plusieurs petits blocs séparément.,Types de mémoire,,,,
Qu'est ce que la vitesse d'accesion à la mémore limite t-elle et pourquoi ?,Les processeurs. La fréquence d'horloge des processeurs est bcp plus rapide que la vitesse d'accession à la mémoire (SRAM et DRAM).,Types de mémoire,,,,
Quelles sont les 2 solutions envisagées pour pallier à l'écart de vitesse entre les horloge de processeurs et la vitesse d'accès à la mémoire?,1. Combiner SRAM et DRAM µ 2. Mémoire cache,Types de mémoire,,,,
Pourquoi est-ce que combiner SRAM et DRAM est difficilement faisable en pratique ?,Chaque application devraient déterminer quelles sont les instructions à exécuter et quelles données doivent être placées en SRAM.,Types de mémoire,,,,
Que peux-tu dire sur la vitesse de la mémoire cache ?,Rapide,Mémoire cache,,,,
Que peux-tu dire sur la capacité de la mémoire cache ?,Faible capacité,Mémoire cache,,,,
"Dans un scénario avec un cache et ou le processeur a besoin de lire une donnée, comment se déroule cette demande ?","La mémoire cache reçoit l'adresse demandée et vérifie si la donnée correspondant à cette adresse est présente en mémoire cache, si c'est le cas la mémoire cache renvoie la donnée. Sinon la mémoire cache interroge la mémoire RAM pour la donnée, se met à jour et ensuite répond au processeur.",Mémoire cache,,,,
"Dans un scénario avec un cache et ou le processeur a besoin d'écrire une donnée, comment se déroule cette demande ?",En utilisant la technique du write back.,Mémoire cache,,,,
Définis la technique du write back.,Tout écriture est faite en mémoire cache directement. µ Une donnée modifiée n'est réecrite en mémoire RAM que lorsqu'elle doit être retirée de la mémoire cache.,Mémoire cache,,,,
"Lorsque la technique du write back est utilisée sur un système supportant DMA, qu'est ce que le système d'exploitation doit faire obligatoirement ?",Le Système d'exploitation doit veiller à ce que les données écrites par le processeur en cache aient bien été écrites également en mémoire RAM.,Mémoire cache,,,,
Qu'est ce qu'un registre ?,Une zone de mémoire très rapide sur le processeur. La mémoire la plus rapide sur le processeur.,Les registres,,,,
Pourquoi est-ce que des registres ne peuvent pas être utilisés pour toutes les tâches ?,Car leur nombre est limité.,Les registres,,,,
Quels sont les 8 registres génériques d'un processeur IA32 ?,EBP µ ESP µ EIP µ EAX µ EBX µ ECX µ EDX µ ESI µ EDI µ eflags,L'architecture IA32,,,,
De quoi s'occupent les registres EBP et ESP ?,De la gestion de la pile,L'architecture IA32,,,,
Que contient %esp ?,Le sommet de la pile,L'architecture IA32,,,,
Que contient le registre EIP ?,Il contient l'instruction pointer PC,L'architecture IA32,,,,
Qu'est ce que l'instruction pointer PC ?,L'adresse de l'instruction actuellement executée,L'architecture IA32,,,,
Que contient le registre eflags ?,Il contient les bits drapeau.,L'architecture IA32,,,,
Que veut dire le bit drapeau ZF ?,"Zero Flag, si le résultat de la dernière opération était 0.",L'architecture IA32,,,,
Que veut dire le bit drapeau SF ?,"Sign Flag, si le résultat de la dernière opération était négatif.",L'architecture IA32,,,,
Que veut dire le bit drapeau CF ?,"Carry Flag, si le résultat de la derni!ère instrucion arithmérique non signée nécessitait plus de 32 bits pour être stockée.",L'architecture IA32,,,,
Que veut dire le bit drapeau OF ?,"Overflow Flag, si le résultat de la dernière instruction arithmétique signée a provoqué un dépassement de capacité.",L'architecture IA32,,,,
Quels sont les 5 types de données supportées par un processeur en architecture IA32 ?,char µ short µ int µ long int µ void *,L'architecture IA32,,,,
Quelle est la taille en bytes d'un char ?,1,L'architecture IA32,,,,
Quelle est la taille en bytes d'un short ?,2,L'architecture IA32,,,,
Quelle est la taille en bytes d'un int ?,4,L'architecture IA32,,,,
Quelle est la taille en bytes d'un long int ?,4,L'architecture IA32,,,,
Quelle est la taille en bytes d'un void * ?,4,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un char ?,b,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un short ?,w,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un int ?,1,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un long int ?,1,L'architecture IA32,,,,
Quelle est le suffixe assembleur d'un void * ?,1,L'architecture IA32,,,,
"Quels sont les 5 modes utilisés pour spécifier chaque argument d'une instruction ""mov"" ? (autres instructions aussi ?)",1. registre µ 2. adresage immédiat µ 3. adressage absolu µ 4. adressage indirect  µ 5. une base et un déplacement,Les instructions en assembleur,,,,
Définis le mode registre,Pour spécifier que la source/destination est un registre on préfixe le nom du registre par % (%eax),Les instructions en assembleur,,,,
Définis le mode d'adressage immédiat,Pour spécifiquer que la SOURCE est une constante via le préfixe $,Les instructions en assembleur,,,,
Définis le mode d'adressage absolu,L'un des argument est une adresse en mémoire,Les instructions en assembleur,,,,
Définis le mode d'adressage indirect,L'un des argument est une adresse stockée dans un registre.  Exemple: (%eax) ,Les instructions en assembleur,,,,
Définis le mode avec une base et un déplacement,Extension du mode indirect. µ Il permet de lire en mémoire à une adresse qui est obtenue en additionnant un entier positif/négatif à une adresse stockée dans un registre.,Les instructions en assembleur,,,,
"Que fait l'instruction ""mov"" et quelle est sa syntaxe ?","Déplacer des données entre registres ou depuis/vers la mémoire vers/depuis un registre. µ mov src, dest",Les instructions en assembleur,,,,
"Quelle est la limitation de l'instruction ""mov"" ?",Elle ne permet pas de déplacement entre 2 zones de mémoire égales µ (adresse ==> adresse (même si les deux adresses sont stockés dans des registres)),Les instructions en assembleur,,,,
"Quel type de donnée est-ce que suffixe d'instruction ""b"" permet-t-elle de modifier ?",Byte,Les instructions en assembleur,,,,
"Quel type de donnée est-ce que suffixe d'instruction ""w"" permet-t-elle de modifier ?",Mot de 16bits,Les instructions en assembleur,,,,
"Quel type de donnée est-ce que suffixe d'instruction ""l"" permet-t-elle de modifier ?",Mot de 32bits,Les instructions en assembleur,,,,
"Que fait l'instruction ""inc"" et quelle est sa syntaxe ?",Incrémenter une valeur µ inc dest ,Les instructions en assembleur,,,,
"Que fait l'instruction ""dec"" et quelle est sa syntaxe ?",Décremente une valeur µ dec dest ,Les instructions en assembleur,,,,
"Que fait l'instruction ""not"" et quelle est sa syntaxe ?",Inverser bit a bit µ not source/dest,Les instructions en assembleur,,,,
"Que fait l'instruction ""add"" et quelle est sa syntaxe ?","Additionne une valeur (constante) à une adresse/registre µ La valeur à ajouter est définie par le mode d'adressage immédiat µ add $v, %eax",Les instructions en assembleur,,,,
"Que fait l'instruction ""sub"" et quelle est sa syntaxe ?","Soustrait une valeur à une adresse/registre µ La valeur à soustraire est définie par le mode d'adressage absolu (donc par l'adresse qui pointe vers la valeur à soustraire) µ sub 0x0c, %eax",Les instructions en assembleur,,,,
"Que fait l'instruction ""mul"" ?",Permet de multiplier des nombres entiers non-signés.,Les instructions en assembleur,,,,
"Que fait l'instruction ""imul"" ?",Permet de multiplier des nombres entiers signés.,Les instructions en assembleur,,,,
"Que fait l'instruction ""div"" ?",Permet la division de nombres entiers non-signés.,Les instructions en assembleur,,,,
"Que fait l'instruction ""shl"" ?",Décalage logique vers la gauche (Left),Les instructions en assembleur,,,,
"Que fait l'instruction ""shr"" ?",Décalage logique vers la droite (Right),Les instructions en assembleur,,,,
"Que font les instructions ""or""/""xor""/""and"" ?","Ils effectuent l'opération binaire qu'ils représentent bit à bit µ ex: xorl j, %eax",Les instructions en assembleur,,,,
"Que fait l'instruction ""sete"" ?","Récupère ZF = l'opération "" = """,Les instructions en assembleur,,,,
"Que fait l'instruction ""sets"" ?",Récupère SF,Les instructions en assembleur,,,,
"Que fait l'instruction ""setg"" ?","Récupère ~SF & ~ZF = l'opération "" > """,Les instructions en assembleur,,,,
"Que fait l'instruction ""setl"" ?","Récupère SF = l'opération "" <= """,Les instructions en assembleur,,,,
"Que fait l'instruction ""cmp"" ?","Equivalent à l'instruction ""sub"" sans stocker le résultat",Les instructions en assembleur,,,,
"Que fait l'instruction ""test"" ?","Equivalent à l'instruction ""add"" sans stocker le résultat",Les instructions en assembleur,,,,
"Que fait l'instruction ""je"" ?",Jump si ZF (égal),Les instructions en assembleur,,,,
"Que fait l'instruction ""jne"" ?",Jump si not ZF (pas égal),Les instructions en assembleur,,,,
"Que fait l'instruction ""js"" ?",Jump si SF (négatif),Les instructions en assembleur,,,,
"Que fait l'instruction ""jns"" ?",Jump si not SF (pas négatif),Les instructions en assembleur,,,,
"Que fait l'instruction ""jg"" ?",Jump si (SF et ZF) (strictement supérieur) µ prend en compte l'overflow eventuel,Les instructions en assembleur,,,,
"Que fait l'instruction ""jl"" ?",Jump si not (SF et ZF) (pas strictement supérieur) µ prend en compte l'overflow eventuel,Les instructions en assembleur,,,,
"Que fait l'instruction ""jge"" ?",Jump si SF (supérieur ou égal) µ prend en compte l'overflow eventuel,Les instructions en assembleur,,,,
"Que fait l'instruction ""jle"" ?",Jump si not SF (pas supérieur ou égal) µ prend en compte l'overflow eventuel,Les instructions en assembleur,,,,
Que modifient les instructions de jump ?,Modifie le contenu du registre %eip,Les instructions en assembleur,,,,
Dans quel structure de code est-ce que les instruction jump sont très utiles ?,Les boucles for et while,Les instructions en assembleur,,,,
"Que fait l'instruction ""pushl %reg"" ?","Place le contenu de %reg au dessus du sommet de la pile, decrémente le registre %esp de 4 unités.",Les instructions en assembleur,,,,
"Comment peut-on implémenter l'instruction ""pushl %reg"" en utilisant 2 autres instructions ?","subl $4, %esp µ movl %reg, (%esp)",Les instructions en assembleur,,,,
"Que fait l'instruction ""popl %reg"" ?","Retire le mot de 32 bits du sommet de la pile et le place dans %reg, incrémente %esp de 4",Les instructions en assembleur,,,,
"Comment peut-on implémenter l'instruction ""popl %reg"" en utilisant 2 autres instructions ?","movl (%esp), %reg µ addl $4, %esp",Les instructions en assembleur,,,,
"En langage assembleur, à quoi revient l'exécution d'une fonction ?",A modifier le contenu de %eip en placant le pointeur d'instruction au début de la fonction appélée. µ Les arguments de la fonction sont placés sur la pile. µ La valeur de retour de la fonction sont stockée dans le registre %eax.,Les instructions en assembleur,,,,
Quelles sont les 3 causes d'erreur que l'OS peut identifier ?,1. Accès a un segment de mémoire non autorisé µ 2. Utilisation d'opération arithmétique non supportée (div par 0) µ 3. Utilisation en mode utilisateur d'une instruction autorisée seulement en mode protégé,Services de l'OS,,,,
A quel cause d'erreur correspond segfault ?,A un accès à un segment de mémoire non autorisé.,Services de l'OS,,,,
"Définis ""breakpoint""",Adresse d'instruction ou le debugger va s'arrêter pour permettre au développeur d'analyser l'exécution du programme.,Services de l'OS,,,,
Comment est-ce que l'OS gère les accès des applications aux périphériques ?,L'OS fournit aux applications des services d'entrée/sortie au travers d'abstractions facilement manipulables par un programmeur.,Services de l'OS,,,,
Quels sont les 3 objectifs derrière le partage des ressources par l'OS ?,1. Utilisation efficace µ 2. Partage équitable des ressources µ 3. Isolation des ressources utilisées par un processus/utilisateur,Le partage des ressources,,,,
Quels sont les 3 services nécessaires au partage des ressources ?,1. Allocation des ressources µ 2. Contrôle d'usage µ 3. Protection d'accès,Le partage des ressources,,,,
Pourquoi est-ce que l'allocation des ressources est nécessaire au partage des ressources ?,Certaines ressources doivent être accessible de manière exclusive (ex: Clavier) alors que d'autres doivent être accessible de manière partagée (ex: Adaptateur réseau),Le partage des ressources,,,,
Pourquoi est-ce que le controle d'usage est nécessaire au partage des ressources ?,Il faut savoir quel processus/utilisateur accède à quelle quantité de ressources,Le partage des ressources,,,,
Pourquoi est-ce que la protection d'accès est nécessaire au partage des ressources ?,Il faut vérifier si un programme/utilisateur à l'autorisation d'utiliser une ressource,Le partage des ressources,,,,
Que permettent les appels systèmes ?,Ils permettent aux programmes d'interagir avec le système d'exploitation,Appels systèmes,,,,
Que sont les appels systèmes ?,Des fonctions placés dans le Kernel qui sont utilisables par les processus lancés par les utilisateurs.,Appels systèmes,,,,
Qu'est ce que le Kernel ?,Programme spécial qui est toujours présent en mémoire. µ Contient les appels systèmes (fonctions). ,Appels systèmes,,,,
Quels sont les 6 étapes suivies lors du lancement d'une fonction par un programme ?,1. Placer arguments dans la pile µ 2. Sauvegarder sur la pile l'adresse de retour µ 3. Modifier %eip pour que le pointeur pointe vers le début de la fonction appelée µ 4. Récupérer les arguments de la fonction sur la pile µ 5. Sauvegarder le résultat de la fonction dans %eax µ 6. Retourner à instruction qui suit l'appel de la fonction en modifiant %eip,Appels systèmes,,,,
Compare l'exécution suivant l'appel à une fonction et l'exécution suivant l'appel à un appel système.,Les 6 étapes sont les même. µ Le flux d'exécution des instructions d'un appel système doit passer du programme utilisateur au noyau du système d'exploitation.,Appels systèmes,,,,
"Sous Linux, où sont placés les arguments d'un appel système ?","Dans des registres (%ebs, %exc, ...)",Appels systèmes,,,,
Pourquoi les arguments d'un appel système sont-ils placés dans des registres ?,Pour permettre au Kernel d'y accéder facilement.,Appels systèmes,,,,
Que peux-tu dire sur le Kernel lors du démarrage de l'ordinateur ?,"Lorsqu'un ordinateur démarre, le proceseur est placé en mode PROTEGE et le kernel se charge en initialisant plusieurs structures de données et en lancant init() (premier processus système). init() place le processeur en mode UTILISATEUR.",Appels systèmes,,,,
Quels sont les deux moyens possibles pour qu'une instruction du Kernel soit executée ?,1. Interruption matérielle µ 2. Processus utilisateur execute un appel système,Appels systèmes,,,,
Qu'est ce qui arrive lors d'une interruption matérielle ?,Le processeur passe en mode protégé et le Kernel exécute la routine de traitement d'interruption correspondant à l'interruption qui est apparue.,Appels systèmes,,,,
Qu'est ce qui arrive lors d'une appel système ?,Une instruction spéciale démarre (= interruption logicielle) et place le processeur en mode PROTEGE puis elle exécute une instruction placée à une adresse spéciale en mémoire.,Appels systèmes,,,,
Pourquoi est-ce que Unix est developpé avec un système de couches ?,Pour être facilement modulable = µ 1 débug à débugger µ 2. facile à modifier,Structure en couches d'Unix,,,,
Que fait la couche 0 d'Unix ?,"Via le driver de périphériques, elle tansforme des requêtes pour des blocs de données en des commandes bas niveau pour par exemple actionner le bras de lecture du disque.",Structure en couches d'Unix,,,,
Que fait la couche 1 d'Unix ?,"Elle construit une abstraction de volumes de données, correspondant aux disques virtuels (volumes) µ N'a pas connaissance de la notion de fichiers/répertoires",Structure en couches d'Unix,,,,
Que fait la couche 2 d'Unix ?,Elle fait la correspondance entre les blocs de données et les notions haut-niveau que sont les fichiers et les répertoires.,Structure en couches d'Unix,,,,
Quels sont les 2 avantages d'une structure en couches pour un OS ?,"1. Plus facile d'isoler les différentes fonctionnalités et de porter l'OS d'un environnement à un autre (ex: passer d'un SSD à un HDD ne change que la couche 0) µ 2. Plus simple a débugger (test de la couche 0, puis 1, etc)",Structure en couches d'Unix,,,,
Quels sont les 2 inconvénients d'une structure en couches pour un OS ?,1. Les appels systèmes doivent désormais utiliser une succession d'appels entre les couches µ 2. Difficile à structurer clairement car les services systèmes sont souvent interdépendants,Structure en couches d'Unix,,,,
Quels sont les deux éléments que combine la strucure en module ?,"1. Coeur du système d'exploitation contenant les services fondamentaux du système (gestion de processus, gestion de mémoire virtuelle) µ 2. Un certains nombre de modules s'occupant des autres fonctionnalités",Structure en modules de Linux,,,,
Quels sont les 3 avantages d'une structure en modules ?,1. Facile à débugger si les modules ont des interfaces bien définies µ 2.  Facilite l'évolution de l'OS et sa portabilité sur d'autres systèmes µ 3. Résoud le problème d'interdépendances entre les couches,Structure en modules de Linux,,,,
Quel est l'inconvénient d'une structure en modules ?,Problème de fiabilité car il y a une grande quantité de code exécuté en mode protégé au sein du noyau.,Structure en modules de Linux,,,,
Quelle solution peut résoudre l'inconvénient d'une structure en modules ?,"Un micro-noyau, on réduit la taille du noyau au strict minimym et on met le reste des fonctionnalités sous forme de programmes en espace utilisateur.",Structure en modules de Linux,,,,
"Définis ""thread""",Séquence d'instructions qui utilise un bloc de registres.,Utilisation de plusieurs threads,,,,
Qu'est ce qu'est POSIX ?,Librairie qui permet d'utiliser les threads en langage C.,Utilisation de plusieurs threads,,,,
Quelles sont les 4 raisons qui rend les threads importants ?,1. Seule façon de tirer parti de la performance des processeurs multi-coeurs. µ 2. Exécution de plusieurs applications en temps partagé sur un même système. µ 3. Découpage d'une application en composants semi-indépendants. µ 4. Facilite le développement d'applications interactives,Utilisation de plusieurs threads,,,,
Quels sont les deux éléments qu'un thread crée lors de sa création ?,1. Sa propre Stack µ 2. Son propre contexte (= registres),Utilisation de plusieurs threads,,,,
"Définis ""section critique""",Séquence d'instructions qui ne peuvent jamais être exécutées par plusieurs threads simultanément.,Section critique,,,,
Quels sont deux mécanismes utilisés pour gérer les sections critiques ?,1. mutex µ 2. sémaphores,Section critique,,,,
Définis le problème de l'exclusion mutuelle,Trouver un algorithme qui permet de garantir qu'il n'y aura jamais 2 threads qui simultanément exécuteront des instructions de leur section critique.,Section critique,,,,
Comment est ce que les threads fonctionnent sur un processeur mono-thread.,Les différents threads s'entrelacent.,Section critique,,,,
Quel acteur s'occupe de passer le fil d'exécution d'un thread à un autre ?,Le Scheduler,Section critique,,,,
Lors d'un passage du fil d'exécution d'un thread à un autre que se passe t-il ?,Il y a un changemetn de contexte.,Section critique,,,,
"Sur un système UNIX, quels 2 phénomènes peuvent être à l'origine d'un changement de contexte ?",1. Interruption matérielle µ 2. Appel système bloquant,Section critique,,,,
Quelle est la caractéristique d'un appel système non-bloquant ?,Appel système que le système d'exploitation peut exécuter immédiatement. Retourne généralement une valeur qui fait partie des données du système d'exploitation lui-même.,Section critique,,,,
Quelle est la caractéristique d'un appel système bloquant ?,Appel système dont le résultat ne peut pas toujours être fourni immédiatement.,Section critique,,,,
Quels sont les 3 états possibles d'un thread ?,1. Ready µ 2. Running µ 3. Blocked,Section critique,,,,
"Définis l'état ""Ready"" d'un thread",Aucune instruction ne s'exécute sur un processeur mais elles sont prêtes à l'être dés qu'un processeur se libèrera,Section critique,,,,
"Définis l'état ""Running"" d'un thread",Les instructions du threads s'exécutent sur un processeur,Section critique,,,,
"Définis l'état ""Blocked"" d'un thread","Aucune instruction ne s'exécute sur un processeur. Le thread a exécuté un appel système bloquant, le système attend l'information permettant de retourner le résultat de l'appel système.",Section critique,,,,
Qui gère les transitions entre les différents états d'un thread ?,L'OS,Section critique,,,,
Comment est-ce qu'un thread passe de l'état RUNNING à l'état BLOCKED ?,En exécutant un appel système bloquant.,Section critique,,,,
Comment est-ce qu'un thread passe de l'état BLOCKED à l'état RUNNING ?,Cela dépend de l'OS,Section critique,,,,
Comment est-ce qu'un thread passe de l'état RUNNING à l'état READY ?,Cela dépend de l'OS,Section critique,,,,
Que sont les mutex et que permettent-ils ?,Les mutex sont une structure de données permettant de contrôler l'accès à une ressource.,Les mutex,,,,
Quels sont les deux états possibles d'un mutex ?,1. locked µ 2. unlocked,Les mutex,,,,
"Quand un mutex à l'état ""locked"" que se passe-t-il concrètement ?",La ressource est actuellement utilisée,Les mutex,,,,
"Quand un mutex à l'état ""unlocked"" que se passe-t-il concrètement ?",La ressource est accessible sans violer l'exclusion mutuelle,Les mutex,,,,
Que se passe-t-il quand un thread appelle lock() alors que le mutex est réservé ?,Ce thread sera interrompu et placé en état BLOCKED jusqu'à la libération de ce mutex.,Les mutex,,,,
Quels sont les deux éléments qu'un sémaphore contient ?,1. entier non signé ù 2. file de pointeurs vers les threads en attente sur ce sémaphore,Les sémaphores,,,,
Quelle est la différence entre un mutex et un sémaphore au niveau des appels de leurs fonctions ?,Pour un mutex c'est le même thread qui va le lock/unlock. µ Pour un sémaphore les appels aux fonctions wait et post peuvent très bien être effectués par des threads différents.,Les sémaphores,,,,
Quels sont les 4 problèmes de synchronisation étudiés dans le cadre du cours ?,1. Philosophes µ 2. Rendez-vous µ 3. Readers-Writers µ 4. Producteurs-Consommateurs,Les sémaphores,,,,
Décris le problème des philosophes,"Coordonner l’accès de plusieurs threads à plusieurs ressources, chacune de ces ressources devant être utilisée de façon exclusive",Les sémaphores,,,,
Décris le problème de rendez-vous,"Chacun de ces threads travaille en deux phases. Durant la
première phase, tous les threads sont indépendants et peuvent s’exécuter simultanément. Cependant, un thread
ne peut démarrer sa seconde phase que si tous les N threads ont terminé leur première phase.",Les sémaphores,,,,
Décris le problème des readers-writers,Des threads doivent accéder à une base de données. Ou plusieurs readers peuvent s’exécuter simultanément et ou un writer peut accéder au données que si aucune writer et aucun reader n'y accèdent.,Les sémaphores,,,,
Décris le problème des producteurs-consommateurs,Producteurs et consommateurs qui utilisent un même buffer à capacité limitée. Les deux types doivent avancer à leur rythme sans que les producteurs ne bloquent inutilement les consommateurs et inversement.,Les sémaphores,,,,
"Que fait le qualitifcatif de variable ""volatile"" ?",Il force le compilateur ) recharger la variable depuis la mémoire avant chaque utilisation.,"Les variables ""volatile""",,,,
"Quels sont les impacts du qualificatif de variable ""volatile"" ?",1. Augmente le nombre d'accès à la mémoire ==> diminue performances µ 2. Sécurise un code multi-threadé en assurant que la variable est bien à jour pour tous les threads,"Les variables ""volatile""",,,,
"Que fait le qualitifcatif de variable ""__thread"" ?","La variable qualifiée n'est accessible que pour le thread qui l'a créée, chaque thread dispose de sa propre version de la variable",__thread,,,,
"Quand une fonction est qualifiée de ""thread-safe"", qu'est ce que cela veut dire concrètement ?",Cette fonction peut être utilisée de manière concurrente sans aucun risque d'incohérence.,Les fonctions thread-safe,,,,
Qu'est ce qu'est un processus ?,Instance de programme qui est en train d'être exécutée sur un/plusieurs processeurs sous le contrôle de l'OS.,Les processus,,,,
Quels sont les 3 éléments contenu par un processus ?,1. Ensemble d'instructions pour le processeur µ 2. Données stockées en mémoire µ 3. Un contexte / des contextes si multi-threadé,Les processus,,,,
Qu'est ce qu'un contexte contenu dans un processus ?,C'est l'ensemble des données qui permettent de reprendre l'exécution d'un processus qui a été interrompu.,Les processus,,,,
"L'OS maintient certain éléments durant la vie d'un processus, que sont-ils et comment évoluent-ils lors de la vie d'un processus ?",L'OS maintient un certain nombre de structures de données qui sont nécessaires au bon fonctionnement du processus. µ Elles sont créees au démarrage du processus. µ Elles sont mises à jour durant la vie du processus. µ 3. Elles sont supprimées lorsque le processus se termine.,Les processus,,,,
Quelles sont les 4 étapes de la création d'un processus ?,1. Shell localise le fichier exécutable µ 2. Shell demande au noyau de créer un nouveau processus µ 3. Le nouveau processus demande au noyau le chargement de l'exécution du code du fichier programme µ 4. Shell attend la fin de l'exécution du processus créé et récupère sa valeur de retour,Les processus,,,,
"Que fait l'appel système ""fork"" ?",Permet de créer un processus en créant une copie du processus qui l'a appelé.,Les processus,,,,
"Comment appelle-t-on le processus qui a fait l'appel système ""fork"" ?","""père""",Les processus,,,,
"Comment appelle-t-on le processus né d'un appel système ""fork"" ?","""fils""",Les processus,,,,
"Que retourne l'appel système ""fork"" en cas d'erreur et que cela signifie-t-il ?",-1 µ Aucune processus n'est créé,Les processus,,,,
"Que retourne l'appel système ""fork"" au processus PERE en cas d'exécution normale et que cela signifie-t-il ?",une valeur positive = identifiant du processus FILS µ Processus créé !,Les processus,,,,
"Que retourne l'appel système ""fork"" au processus FILS en cas d'exécution normale et que cela signifie-t-il ?",0 µ Processus créé !,Les processus,,,,
"Quand on dit que l'appel système ""fork"" copie un processus, on sous-entend qu'il le copie dans son entièreté, quels sont les éléments des segments de mémoire qui sont donc copiés ?","text, data, heap µ context, stack",Les processus,,,,
"Lors d'un appel système ""fork"" quels éléments ne sont pas copiés dans le processus fils ?",Les autres threads du processus père.,Les processus,,,,
Que peux-tu dire sur la destination d'écriture des processus père et fils ?,Ils écrivent sur les mêmes sorties.,Les processus,,,,
Quels sont les deux moyens pour marquer la fin d'un processus ?,1. return dans la fonction main µ 2. exit,Les processus,,,,
"Que fait la fonction ""atexit"" ?",Elle permet d'enregister des fonctions qui seront appelées lors de l'exécution de la fonction exit,Les processus,,,,
Comment est-ce qu'un processus père peut-il récupérer le statut de son processus fils ?,"Via la l'appel système ""waitpid"".",Les processus,,,,
"Définis l'appel système ""waitpid""","""waitpid"" permet à un processus père de récupérer le statut de son processus fils µ ""waitpid"" est un appel système bloquant",Les processus,,,,
"Quels sont les 3 arguments et leur type de l'appel système ""waitpid"" ? ",1. pid_t pid: id du processus fils (<0 si on considère n'importe quel processus fils) µ 2. int* status : pointer vers un entier qui contiendra le statut retourné par le processus fils µ 3. int options : pas vu au cours,Les processus,,,,
"Comment est-il possible de traduire l'appel système ""wait(p)"" avec l'appel système ""waitpid"" ?","""waitpid(-1, p, 0)""",Les processus,,,,
Est-ce qu'un processus père peut terminer sans la terminaison de ses processus fils dans un cadre d'exécution sans erreur ?,"Non, un processus père DOIT attendre la fin de ses processsus fils dans un cadre d'exécution sans erreur.",Les processus,,,,
"Comment appelle-t-on un processus fils dont le processus père s'est interrompu sans arriver à l'appel système ""waitpid"" ?","On appelle ce processus fils ""orphelin"".",Les processus,,,,
"Lorsqu'un processus fils est déclaré comme ""orphelin"", qu'est ce que le Kernel va faire ?",Il va modifier les structures de l'orphelin pour que son père soit le processus dont l'indentifiant est 1 = processus init,Les processus,,,,
Comment appelle-t-on un processus fils qui a terminé mais dont la valeur de retour n'a pas encore été récupérée par son processus père ?,"On appelle ce processus fils ""zombie"".",Les processus,,,,
"Lorsqu'un processus fils est déclaré comme ""zombie"", qu'est ce que le Kernel va faire ?",Il libère l'ensemble des ressources associées au processus fils et ne conserve qu'une petite structure de données.,Les processus,,,,
"Pourquoi est-ce qu'il est préférable d'éviter les processus fils ""zombie"" ?","Car même si le Kernel vient libérer la majorité des ressources associées à ces processus fils ""zombie"" ils consomment quand même un peu de ressources.",Les processus,,,,
"Que fait l'appel système ""execve"" ?",Il permet l'exécution d'un programme. L'image en mémoire du processus qui exécute execve est remplacé par l'image de l'exécutable passée en argument à execve et son exécution démarre à sa fonction main.,Les processus,,,,
"Quels sont les 3 arguments de l'appel système ""execve"" ?",1. const char *path : nom complet fichier du exécutable qui doit être lancé µ 2. char *const argv[] : arguments à passer à l'exécutable µ 3. char *const envp[] : pointer vers l'environnement qui sera nécessaire à l'exécution du programme,Les processus,,,,
"Quand un processus multi-threadé exécute l'appel système ""execve"", qu'arrive-t-il à ses threads ?",Ils sont immédiatement supprimés.,Les processus,,,,
Qu'est ce que la table des processus ?,C'est une liste complète des processus en cours d'exécution.,Les processus,,,,
Quels sont les 3 moyens de consulter la table des processus ?,1. ps µ 2. top µ 3. pstree,Les processus,,,,
D'où sortent les informations de la table des processus ?,Depuis le pseudo-système de fichier /proc,Les processus,,,,
"Les instructions d'un processus comportent évidemment le code source de celui-ci, mais ils comportent aussi possiblement d'autres éléments, quels sont-ils ?",Les librairies utilisées par le développeur.,Les librairies,,,,
Définis une librairie statique,Librairie de fonctions qui est intégrée directement avec le programme µ Elle fait entièrement partie de l'exécutable,Les librairies,,,,
Définis une librairie partagée,Ensemble de fonctions qui peuvent être appelées par un programme mais qui sont stockées dans un seul fichier sur le disque. µ Ce fichier unique est utilisé automatique par tous les programmes qui utilisent les fonctions de cette librairie.,Les librairies,,,,
Comment peut-on forcer gcc à inclure le code des librairies utilisées dans l'exécutable ?,"Via l'argument ""--static""",Les librairies,,,,
Que permet l'algorithme de Peterson ?,Cet algorithme permet à plusieurs threads de coordonner leur exécution de façon à éviter une violation de section critique.,L'algorithme de Peterson,,,,
Par quel moyen l'algorithme de Peterson accomplit ce qu'il fait ?,En utilisant des variables accessibles à tous les threads.,L'algorithme de Peterson,,,,
Qu'est ce qu'un livelock ?,C'est une situation dans laquelle plusieurs threads exécutent une séquence d'instructions sans qu'aucun thread ne puisse réaliser de progrès.,L'algorithme de Peterson,,,,
"Explique comment l'algorithme de Peterson fonctionne (pour N=2, thread A et thread B)","1. tableau flag initialisé à [false, false] µ 2. variable accesible à tous les threads ""turn"" µ 3. flag[A]=true; et turn=B µ 4. while(flag[B] && turn==B) {} µ 5. section_critique(); µ 6. flag[A]=false; µ 7. même logique pour le thread B (avec A et B inversé)",L'algorithme de Peterson,,,,
Quelles sont les 3 étapes utilisées dans la preuve de l'algorithme de Peterson ?,1. Vérifier qu'il ne peut y avoir de violation de la section critique µ 2. Vérifier qu'il ne peut y avoir de livelock µ 3. Vérifier que l'arrêt d'un thread hors de sa section critique n'empêche pas l'autre thread d'accéder à sa section critique,L'algorithme de Peterson,,,,
Qu'est ce qu'est l'algorithme du filtre ?,Extension de l'algorithme de Peterson à N threads,L'algorithme du filtre,,,,
Quelle condition doit-on respecter pour utiliser l'algorithme du filtre ?,Il est nécessaire de connaître à l'avance le nombre de threads qui souhaitent synchoniser l'accès à leur section critique.,L'algorithme du filtre,,,,
"Lors d'un passage d'un niveau à une niveau inférieur dans l'algorithme du filtre, que se passe-t-il ?",1. Au moins un thread doit pouvoir passer µ 2. Au moins un thread doit rester bloqué µ 3. Le nombre de threads pouvant passer décroît de 1 à chaque niveau,L'algorithme du filtre,,,,
Lorsqu'un thread souhaite passer un niveau que fait-il ?,Il donne d'abord la priorité aux autres threads avant de passer lui-même.,L'algorithme du filtre,,,,
Quelles sont les deux cas où un thread peut passer un niveau ?,1. Il n'y a pas d'autre thread en attente au même niveau ou à un niveau supérieur µ 2. Un thread arrivant après lui a donné la priorité,L'algorithme du filtre,,,,
Est-ce que l'algorithme du filtre respecte le principe d'équité ?,Non car il se peut qu'un thread A commence son parcours avant un thread B mais que le thread B accède à sa section critique avant A.,L'algorithme du filtre,,,,
Qu'est ce que la phase doorway ?,"Phase durant laquelle le thread configure ses ressources (variables locales), cette phase ne comporte pas de boucle.",L'algorithme du filtre,,,,
Qu'est ce que la phase waiting ?,Phase durant laquelle le le thread vérifie de façon continue qu'une condition est vérifiée pour entrer dans sa section critique.,L'algorithme du filtre,,,,
Explique comment se qui se passe lorsqu'un thread souhaite accéder à sa section critique dans l'algorithme de Bakery,1. Ce thread obtient un numéro d'ordre µ 2. Ce thread attend que tout les autres threads avec un ticket de numéro plus élevé aient terminé leur section critique µ 3. Ce thread accède à sa section critique,L'algorithme Bakery,,,,
"Quelles sont les 3 raisons pour lesquelles les algorithmes de Peterson, du filtre et de Bakery deviennent difficiles à utiliser sur des ordinateurs actuels ?","1. Il faut connaitre le nombre threads à l'avance µ 2. Les compilateurs modernes suppriment les boucles inutiles µ 3. Dans un ordinateur multiprocesseurs, chaque processeur réordonne les accès à la mémoire afin d'optimiser les performances ce qui peut compromettre la capacité de ces algorithmes à respecter l'exclusion mutuelle",Instructions atomiques,,,,
Définis une opération atomique,Opération qui ne peut être interrompue par l'arrivée d'une interruption lorsqu'elle est exécutée sur un processeur.,Instructions atomiques,,,,
"Traduis l'instruction atomique ""xchg"" en trois instructions équivalentes","movl (var), %ebx µ movl %eax, (var) µ movl %ebx, %eax",Instructions atomiques,,,,
"Définis l'algorithme ""test and set""",On set la nouvelle valeur du lock à 1 µ On renvoie l'ancienne valeur du lock,Instructions atomiques,,,,
"Définis l'algorithme ""test and test and set""",On exécute test-and-set seulement si le lock semble libre (= 0).,Instructions atomiques,,,,
"Définis l'algorithme ""backoff test and test and set""",Basiquement test-and-test-and-set avec un délai grandissant (mais ayant une valeur maximum) entre chaque premier test.,Instructions atomiques,,,,
Quel est le désavantage de test-and-set ?,Beaucoup d'opérations xchg,Instructions atomiques,,,,
Quel est le désavantage de test-and-test-and-set ?,"Dés que le lock est libéré (set à 0), une rafale de lecture et d'opérations xchg est exécutée pour seulement un succès = pic d'occupation du bus.",Instructions atomiques,,,,
Quels sont les deux moyens de backoff-test-and-test-and-set pour pallier au désavantage de test-and-test-and-set ?,1. Délai grandissant entre chaque premier test µ 2. Randomisation partielle des délais entre les premiers tests,Instructions atomiques,,,,
Quels sont les 3 états possibles d'un cache dans le protocole MSI ?,1. M (modified) µ 2. S (shared) µ 3. I (Invalid),Instructions atomiques,,,,
Que représente l'état M du cache dans le protocole MSI ?,"Uniquement ce processeur à une copie de cette entrée, càd que le cache contient une valeur plus récente que celle dans la mémoire principale.",Instructions atomiques,,,,
Que représente l'état S du cache dans le protocole MSI ?,La valeur est partagée càd qu'elle est identique dans tout les caches.,Instructions atomiques,,,,
Que représente l'état I du cache dans le protocole MSI ?,Contient une valeur invalide qui ne peut plus être utilisée et qui doit être mise à jour.,Instructions atomiques,,,,
"Quel type d'accès les instructions atomiques telles que ""xchg"" ont-elles besoin ?","Une instruction atomique telle que ""xchg"" impliquant une adresse mémoire doit avoir l'accès en mode M à ce mot mémoire dans leur cache.",Instructions atomiques,,,,
"Lorsqu'une instruction atomique a accès en mode M à un mot mémoire, quel impact est-ce que cela a sur les autres processeurs ?",Les autres processeurs ont leur accès au bus bloqué.,Instructions atomiques,,,,
Pourquoi est-ce que l'accès en mode M à un mot mémoire d'une instruction atomique doit empêcher les autres processeurs d'accéder au bus ?,Pour empêcher l'invalidation par un autre processeur du mot mémoire accédé en mode M.,Instructions atomiques,,,,
Qu'est ce que le scheduler ?,Composant de l'OS reponsable de planifier et de gérer les tâches qui sont exécutées par le système.,Le scheduler,,,,
Quel est le rôle du scheduler par rapport aux threads ?,Il fait passer les threads d'un état à un autre.,Le scheduler,,,,
Qu'est ce qui fait passer un thread de l'état RUNNING à l'état BLOCKED ?,Lorsqu'un appel système bloquant a été appelé par le thread.,Le scheduler,,,,
A quoi est-ce que les threads dans l'état BLOCKED sont-ils associés ?,Ils sont associés à une structure de donnée du noyau qui joue un rôle de salle d'attente.,Le scheduler,,,,
Qu'est ce qui fait passer un thread de l'état RUNNING à l'état READY ?,Lorsque le thread libère le processeur sur lequel il exécute actuellement des instructions.,Le scheduler,,,,
Comment est-ce que les OS comme Linux gèrent-ils le passage d'un thread de l'état RUNNING à l'état READY ?,Ils utilisent une source d'interruption matérielle périodique (horloge système) pour redonner le contrôle à l'OS. Ils font subir une préemption au thread qui change d'état.,Le scheduler,,,,
"Quand on dit qu'un thread subit une préemption, qu'est ce que cela veut dire ?",L'OS provoque un changement de contexte au thread.,Le scheduler,,,,
En quoi consiste le passage d'un thread de l'état READY à l'état RUNNING ?,On restaure l'état précédemment sauvegardé d'un thread et état READY sur un processeur et on reprend son exécution.,Le scheduler,,,,
Quels sont les 2 critères de performance du scheduler d'un point de vue système ?,1. Maximisation de l'utilisation du (des) processeur(s) µ 2. Maximisation du débit actif,Le scheduler,,,,
A quoi correspond le débit actif ?,C'est le nombre de processus qui peuvent terminer leur exécution en une unité de temps donnée.,Le scheduler,,,,
Quels sont les 3 critères de performance du scheduler d'un point de vue application ?,1. Minimisation du temps total d'exécution µ 2. Minimisation du temps d'attente moyen µ 3. Minimisation du temps de réponse,Le scheduler,,,,
"Lorsqu'on parle des critères de performance du scheduler d'un point de vue application, à quoi correspond le temps total d'exécution ?",Temps entre la création du processus et sa terminaison,Le scheduler,,,,
"Lorsqu'on parle des critères de performance du scheduler d'un point de vue application, à quoi correspond le temps d'attente moyen ?",Temps entre la mise en état READY et l'obtention d'un processeur,Le scheduler,,,,
"Lorsqu'on parle des critères de performance du scheduler d'un point de vue application, à quoi correspond le temps de réponse ?",Somme entre le temps d'attente et le temps nécessaire pour terminer l'exécution de son burst CPU,Le scheduler,,,,
"Que veut dire un ""burst CPU"" ?",Phénomène où une tâche/processus utilise une quantité importante de ressources de traitement dans un court laps de temps.,Le scheduler,,,,
Comment est-ce que le scheduler FCFS (First-Come-First-Serve) fonctionne-t-il ?,Chaque CPU burst s'exécute intégralement avant de libérer le processeur pour un autre thread. µ Ce scheduler donne un CPU aux processus en fonction de l'ordre dans lequel ces derniers sont arrivés.,Le scheduler,,,,
Comment est-ce que le scheduler SJF (Shortest Job First) fonctionne-t-il ?,Ce scheduler donne un CPU au thread qui a le plus court CPU burst.,Le scheduler,,,,
Quel est l'avantage du scheduler SJF ?,Il offre un temps d'attente moyen optimal.,Le scheduler,,,,
Quel est le désavantage du scheduler SJF ?,Il n'est pas équitable.,Le scheduler,,,,
Comment est-ce que le scheduler RR (Round Robin) fonctionne-t-il ?,C'est un scheduler préemptif qui donne la même tranche de temps de façon périodique pour chaque processus.,Le scheduler,,,,
Quel est l'avantage du scheduler RR ?,Il est équitable.,Le scheduler,,,,
Quels sont les 2 désavantages du scheduler RR ?,1. Il cause énormément de changements de contecte. µ 2. Il ne distingue pas les processus selon leur temps de burst,Le scheduler,,,,
Comment est-ce que un scheduler à priorité fonctionne-t-il ?,On exécute le thread en état READY avec la priorité la plus elevée. µ Une liste circulaire est maintenue pour chaque priorité. µ Si plusieurs threads ont la même priorité alors un scheduler de type RR est appliqué. ,Le scheduler,,,,
Comment un scheduler à priorité évite qu'il y ait des processus en état de famine ?,"Deux niveaux de priorité sont attribués, priorité basse et priorité courante. µ A chaque exécution d'un burst CPU, la priorité courante d'un processus diminue. µ Un nouveau cycle commence lorsque tous les threads ont une priorité courante égale à 0.",Le scheduler,,,,
Dans quel cas est-il préférable de laisser des threads terminer leur section critique plutôt que de les préempter ?,Quand plusieurs threads avec des priorités différentes partagent un mutex.,Le scheduler,,,,
Quel utilitaire permet de changer la priorité d'un processus ?,L'utilitaire nice.,Le scheduler,,,,
Quels sont des 2 types d'adresse de mémoire ?,1. Adresses réelles/physiques µ 2. Adresses virtuelles,La mémoire virtuelle,,,,
Qu'est ce qu'une adresse virtuelle ?,Adresse qui est utilisée à l’intérieur d’un programme,La mémoire virtuelle,,,,
Qu'est ce qu'une adresse réelle/virtuelle ?,Adresse qui est utilisée par des puces de RAM pour les opérations d’écriture et de lecture.,La mémoire virtuelle,,,,
Quel type d'adresse est échangée sur le bus auquel la mémoire est connectée ?,Ce sont les adresses physiques.,La mémoire virtuelle,,,,
Quel unité s'occupe de traduire les adresses virtuelles en adresses physiques ?,Le MMU = Memory Management Unit,La mémoire virtuelle,,,,
Quels sont les 5 avantages de l'utilisation d'adresses virtuelles ?,"1. Permet plus d'espace d'adressage virtuel que physique µ 2. Permet de ne plus se poser la question de l'endroit où un processus va être mappé en mémoire lors de son exécution µ 3. Permet d'avoir des espaces de mémoire partagés µ 4. Permet de combiner la mémoire RAM avec de la mémoire d'un autre type (SDD, HDD) = SWAP µ 5. Permet d'unifier l'accès à la mémoire en mappant un fichier dans l'espace virtuel d'un processus",La mémoire virtuelle,,,,
Quelle condition doit être respectée pour que la mémoire virtuelle permette des espaces de mémoire partagés ?,Si le MMU sait réaliser une traduction spécifique à chaque processus.,La mémoire virtuelle,,,,
Quand est-ce que la traduction des adresses virtuelles en adresses réelles/physiques se fait-elle dans le cycle de vie d'un programme ?,Au moment de l'exécution du programme (cela permet de ne pas devoir connaître les adresses à l'avance),La mémoire virtuelle,,,,
Qu'est ce qu'est une page quand on parle de mémoire ?,Zone de mémoire contiguë.,La mémoire virtuelle,,,,
Quelle taille en Ko fait une page quand on parle de mémoire ?,4 Ko,La mémoire virtuelle,,,,
Quelle hypothèse faisons-nous par rapport aux pages quand on parle de mémoire ?,Les données d'une page se suivent autant virtuellement que physiquement.,La mémoire virtuelle,,,,
Est-ce que un programme chargé en mémoire peut occuper un nombre décimale de page ?,Non un programme chargé en mémoire doit occuper un nombre entier de pages.,La mémoire virtuelle,,,,
Quelle est la définition d'une adresse avec les pages quand on parle de mémoire ?,Une adresse est le numéro de la page et le déplacement dans cette page.,La mémoire virtuelle,,,,
Qu'est ce qu'une adresse relative quand on parle de mémoire ?,C'est le déplacement (offset) nécessaire par rapport au début de la page d'une adresse.,La mémoire virtuelle,,,,
Quels sont les 2 éléments qui composent une adresse ?,1. Les bits de poids fort qui représente le numéro de la page µ 2. Les bits de poids faibles qui représente le déplacement dans la page,La mémoire virtuelle,,,,
Qu'est ce que la table des pages ?,Table qui permet au MMU de faire la correspondance entre les adresses virtuelles et physiques.,La mémoire virtuelle,,,,
Où est stockée la table des pages ?,Dans la mémoire RAM.,La mémoire virtuelle,,,,
Quels sont les 2 éléments que contient une ligne de la table des pages ?,1. Bit de validité µ 2. Adresse en mémoire RAM (ou l'information équivalente pour SSD/HDD),La mémoire virtuelle,,,,
Que décrit le bit de validité que contient chaque ligne de la table des pages ?,Il indique si la page est actuellement stockée en mémoire physique ou non,La mémoire virtuelle,,,,
Est-ce que chaque processus possède sa propre table des pages ?,"Oui, chaque processus possède sa propre table des pages.",La mémoire virtuelle,,,,
"Lors d'un changement de contexte, comment l'OS gère-t-il les tables des pages ?","Comme chaque processus possède sa propre table des pages, l'OS modifie le registre de table des pages de façon à ce qu'il pointe vers la table des pages du processus qui s'exécute.",La mémoire virtuelle,,,,
Est-ce que chaque thread d'un processus possède sa propre table des pages ?,"Non, la table des pages d'un processus est partagée entre tous ses threads.",La mémoire virtuelle,,,,
"Dans l'espace virtuel, quelles adresses sont dédiées au noyau ?",Les adresses mémoire basses et hautes.,La mémoire virtuelle,,,,
Quelle solution a-t-on développé pour pallier au doublement d'accès aux informations en mémoire que cause les adresses virtuelles ?,Le TLB = Translation Lookaside Buffer,La mémoire virtuelle,,,,
Qu'est ce que le TLB ?,Sorte de mémoire cache qui permet de sauvegarder certaines lignes de la table des pages. Il permet au processeur de disposer des pages actuellement utilisées (working set) rapidement.,La mémoire virtuelle,,,,
En se basant sur quel principe est-ce que le TLB rend l'accès aux données en mémoire plus efficace ?,Il se base sur le principe de localité.,La mémoire virtuelle,,,,
Quel est le désavantage du TLB ?,Il coûte cher à implémenter au niveau électronique,La mémoire virtuelle,,,,
Quels sont les 3 niveaux de sécurité des pages quand on parle de mémoire ?,1. R µ 2. W µ 3. X,La mémoire virtuelle,,,,
Quelle information est-ce que le niveau de sécurité R d'une page nous donne ?,La page peut être lue,La mémoire virtuelle,,,,
Quelle information est-ce que le niveau de sécurité W d'une page nous donne ?,La page peut être écrite,La mémoire virtuelle,,,,
Quelle information est-ce que le niveau de sécurité X d'une page nous donne ?,La page contient des instructions que nous pouvons exécuter,La mémoire virtuelle,,,,
"Si un code tente de faire une opération pas permise sur une page, quelle unité va réagir et de quel moyen ?",L'unité MMU va générer une interruption matérielle (segfault).,La mémoire virtuelle,,,,
Via quelle appel système est-il possible de changer les droits relatifs à une page ?,"L'appel système ""mprotect""",La mémoire virtuelle,,,,
Quels sont les 2 moyens via lequel le disque permet de stocker plus de pages virtuelles qu'il n'existe de frame physique ?,1. En utilisant une partition SWAP µ 2. En utilisant un fichier dédié sur le système de fichier standard,La mémoire virtuelle,,,,
Quand est-ce que un défaut de page peut arriver ?,Cela intervient lorsque le bit de validité d'une page est FAUX mais que l'accès à la page est autorisé.,La mémoire virtuelle,,,,
Quelles sont les 2 possibles situations qui peuvent expliquer un défaut de page ?,1. La page doit être créée µ 2. La page est actuellement sur le disque et doit être rapatriée en mémoire RAM,La mémoire virtuelle,,,,
Lorsque l'on doit rapatrier une page depuis le disque sur la mémoire physique et que des frames sont disponibles que va-t-il arriver ?,On remplit une frame avec une page.,La mémoire virtuelle,,,,
Lorsque l'on doit rapatrier une page depuis le disque sur la mémoire physique et qu'aucune frame n'est disponible que va-t-il arriver ?,Une autre page va devoir être évincée de la mémoire physique pour la remplacer par la page à rapatrier.,La mémoire virtuelle,,,,
"Qu'est ce que le ""thrashing"" quand on parle de mémoire ?","Le ""thrashing"" est un phénomène qui arrive quand les ressources mémoire sont trop/mal utilisées et qu'on a plusieurs défauts de page d'affilé.",La mémoire virtuelle,,,,
Pourquoi la stratégie d'évincement de page FIFO est irréaliste ?,Car il n’y a pas vraiment de corrélation entre la date de création/consultation d’une page et le fait qu’elle soit utilisée fréquemment,La mémoire virtuelle,,,,
En quoi consiste la stratégie d'évincement de page LRU ?,On garde une structure qui contient les informations relatives au temps d’utilisation d’une page dans le passé en l'approximant.,La mémoire virtuelle,,,,
"Avec la stratégie d'évincement de page LRU, on ajoute 2 bits supplémentaires dans chaque ligne de la table des pages, quels sont ils ?",1. R (reference bit) µ 2. M (dirty bit),La mémoire virtuelle,,,,
"Dans la stratégie d'évincement de page LRU, à quoi correspond le bit R ?",Mis à 1 dans le TLB à chaque accès à une donnée se trouvant dans la page correspondante (lecture ou écriture).,La mémoire virtuelle,,,,
"Dans la stratégie d'évincement de page LRU, à quoi correspond le bit M ?",Mis à 1 par le MMU chaque fois qu'une opération d'écriture est réalisée dans cette page.,La mémoire virtuelle,,,,
Quels sont les 4 classes de pages de la stratégie d'évincement LRU (bits R-M) ?,1. F-F : Page non utilisée récemment et pas de transfert vers le disque nécessaire µ 2. F-V : Page non utilisée récemment et il faut copier la page vers le disque µ 3. V-F : Page fréquemment utilisée et pas de transfert vers le disque nécessaire µ 4. V-V : Page fréquemment utilisée et il faut copier la page vers le disque,La mémoire virtuelle,,,,
"Qu'est ce que l'on entend par ""fichiers mappés en mémoire""",On place le contenu d'un fichier (ou une partie de son contenu) dans une zone de la mémoire du processus.,Les utilisations de la mémoire virtuelle,,,,
Quel appel système permet de mappé un fichier en mémoire ?,"L'appel système ""mmap""",Les utilisations de la mémoire virtuelle,,,,
"Ou sera mappé un fichier via l'appel système ""mmap"" ?",Généralement il sera mappé entre la heap et la stack du processus. Dans la même zone mémoire que là où se trouvent les librairies partagées.,Les utilisations de la mémoire virtuelle,,,,
"Que fait l'appel système ""msync"" ?",Il force l'écriture des modifications en mémoire sur le disque.,Les utilisations de la mémoire virtuelle,,,,
"Que fait l'appel système ""munmap"" ?",Il supprime le mapping du fichier (ou seulement une partie).,Les utilisations de la mémoire virtuelle,,,,
Est-il possible que deux processus partagent une mémoire commune ?,Oui si ils communiquent explicitement via la mémoire partagée.,Les utilisations de la mémoire virtuelle,,,,
Donne un exemple qui illustre un cas ou plusieurs processus utilise la mémoire partagée ?,Les sémaphores POSIX.,Les utilisations de la mémoire virtuelle,,,,
Quels sont les 4 appels système utiles pour utiliser la mémoire partagée ?,1. shmget µ 2. shmat µ 3. shmdt µ 4. shmctl,Les utilisations de la mémoire virtuelle,,,,
"Que fait l'appel système ""shmget"" ?",Obtenir l'accès à un segment de mémoire partagée ou le créer si il n'existe pas,Les utilisations de la mémoire virtuelle,,,,
"Que fait l'appel système ""shmat"" ?",Rend les pages visibles dans l'espace mémoire du processus,Les utilisations de la mémoire virtuelle,,,,
"Que fait l'appel système ""shmdt"" ?","Rend les pages non visibles une fois que la tâche est finie, permet de sauvegarder les changements si nécessaire.",Les utilisations de la mémoire virtuelle,,,,
"Que fait l'appel système ""shmctl"" ?",Supprime la mémoire partagée (suppression effective après le dernier appel à shmdt),Les utilisations de la mémoire virtuelle,,,,
"Lors de l'utilisation des 4 appels systèmes liés à la mémoire partagée il faut faire attention à quelque chose, quelle est cette chose ?","Il faut être vigilant aux pointers car l'adresse de départ peut changer, les adresses valides dans le processus A ne sont pas valides dans le processus B.",Les utilisations de la mémoire virtuelle,,,,
Quelles sont les 2 manières de résoudre le problème de pointer incorrect que les 3 appels système liés à la mémoire partagée possèdent ?,1. Ne pas utiliser de pointers du tout µ 2. Stocker des adresses relatives au début de la zone de mémoire partagée pour pouvoir calculer l'adresse exacte en mémoire,Les utilisations de la mémoire virtuelle,,,,
Est-ce que le segment de mémoire partagé créé par le processus A persistera après la terminaison du processus A ?,Oui,Les utilisations de la mémoire virtuelle,,,,
"Lors de l'utilisation des 4 appels systèmes liés à la mémoire partagée il existe une bonne pratique d'utilisation de ces appels, quelle est elle ?",Utiliser shmctl juste après l'appel à shmat.,Les utilisations de la mémoire virtuelle,,,,
Où sont mappées les instructions des librairies partagées ?,Elles sont mappées dans l'espace de mémoire des différents processus en utilisant des segments de mémoire partagés.,Les utilisations de la mémoire virtuelle,,,,
"Dans les systèmes modernes, lors d'un appel système ""fork"" ou d'un appel système ""exec"", qu'allons nous seulement copier ?",On va uniquement copier la table des pages du processus père.,Les utilisations de la mémoire virtuelle,,,,
"Dans les systèmes modernes, lors d'un appel système ""fork"" ou d'un appel système ""exec"", est-ce que initialement les adresses virtuelles du père et du fils pointent vers les mêmes adresses physiques ?",Oui,Les utilisations de la mémoire virtuelle,,,,
"Dans les systèmes modernes, lors d'un appel système ""fork"" ou d'un appel système ""exec"", pour quel type de page (protection) pouvons nous avoir un problème ?",Pour les pages qui peuvent être modifiées,Les utilisations de la mémoire virtuelle,,,,
"Dans les systèmes modernes, lors d'un appel système ""fork"" ou d'un appel système ""exec"", quel mécanisme pouvons nous utiliser pour isoler les zones de mémoire du père et du fils ?",On peut utiliser le mécanisme de copy-on-write,Les utilisations de la mémoire virtuelle,,,,
"Quelles sont les étapes du mécanisme ""copy-on-write"" ?",1. On déclare les pages dans les deux tables comme R µ 2. Si le père/fils tente d'écrire et que la page est seulement temporairement R alors on duplique la page vers une nouvelle page physique où la modification se fera effectivement.,Les utilisations de la mémoire virtuelle,,,,
Quels sont les 3 besoins qui apparaissent avec un OS multi-utilisateurs ?, 1. Il faut identifier les utilisateurs (login) µ 2. Il faut pouvoir exécuter des processus partagés entre différents utilisateurs (quel utilisateur responsable de quelle opération) µ 3. Allouer les ressources nécessaires à un utilisateur particulier à un instant T,Gestion d'utilisateurs,,,,
Comment est-ce que l'OS va stocker les noms d'utilisateurs ?,Via des identifiants qui sont des entiers positifs.,Gestion d'utilisateurs,,,,
Où est-ce que l'OS va stocker les mots de passe ?,Il va stocker les mots de passe dans le fichier /etc/passwd,Gestion d'utilisateurs,,,,
Comment est-ce qu'un entrée du fichier /etc/passwd est-elle construite ?,"Toutes les valeurs sont séparées par un "" : "" µ 1. Nom d'utilisateur µ 2. Mot de passe µ 3. Identifiant utilisateur UID µ 4. Identifiant du groupe principale de l'utilisateur (GID) µ 5. Informations supplémentaires (ex: nom complet de l'utilisateur) µ 6. Répertoire ""home"" µ 7. Shell à exécuter lors du login de cet utilisateur",Gestion d'utilisateurs,,,,
Quels sont les 3 types d'utilisateurs sur un système UNIX ?,1. L'utilisateur root µ 2. Utilisateurs normaux µ 3. Utilisateurs spécifiques à des services,Gestion d'utilisateurs,,,,
Que peut faire l'utilisateur root ?,Il est autorisé à faire toutes les opérations qu'il souhaite.,Gestion d'utilisateurs,,,,
Quel identifiant possède l'utilisateur root ?,L'identifiant 0,Gestion d'utilisateurs,,,,
Que peut faire un utilisateur normal ?,Il a accès seulement à ses fichiers et ses processus.,Gestion d'utilisateurs,,,,
Comment est-ce que UNIX fait pour savoir quel utilisateur à lancé quel processus ?,UNIX associe un udentifiant d'utilisateur à chaque processus.,Gestion d'utilisateurs,,,,
Quels sont les 2 appels systèmes liés aux identifiants d'utilisateur associés à chaque processus ?,1. getuid µ 2. setuid,Gestion d'utilisateurs,,,,
"Que fait l'appel système ""getuid"" ?",Il permet de récupérer l'identifiant d'utilisateur associé à un processus,Gestion d'utilisateurs,,,,
"Que fait l'appel système ""setuid"" ?",Il permet de modifier l'identifiant d'utilisateur associé à un processus,Gestion d'utilisateurs,,,,
"Dans un système de fichiers UNIX, comment est-ce que l'ensemble des répertoires et fichiers sont-ils organisés ?","Sous la forme d'un arbre où la racine est le répertoire ""/""",Systèmes de fichiers,,,,
Quelle commande permet d'intégrer facilement des systèmes de fichiers qui se trouvent sur différents dispositifs de stockage ?,La commande mount.,Systèmes de fichiers,,,,
Quels sont les 2 répertoires spéciaux contenus dans tout répertoire ?,"1. ""."" µ 2. ""..""",Systèmes de fichiers,,,,
"Que représente le répertoire spécial ""."" ?",C'est un alias vers le répertoire lui-même,Systèmes de fichiers,,,,
"Que représente le répertoire spécial "".."" ?",C'est un alias vers le répertoire parent du répertoire courant,Systèmes de fichiers,,,,
Quelle commande permet de créer un répertoire ?,mkdir,Systèmes de fichiers,,,,
Quelles sont les 3 types de permissions stockées dans les bits de permission des métadonnées associées à chaque fichier ?,1. r : autorisation de lecture µ 2. w : autorisation d'écriture/modification µ 3. x : autorisation d'exécution (fichiers) ou de parcours (répertoires),Systèmes de fichiers,,,,
"Les bits de permissions pour les fichiers et répertoires sont regroupés en 3 blocs, quel concernent-ils ?",1. Processus appartenant à l'utilisateur qui est propriétaire du fichier/répertoire µ 2. Processus dont l'identifiant de groupe est identique µ 3. Processus appartenant à d'autres utilisateurs,Systèmes de fichiers,,,,
Que fait l'appel système chmod ?,Il permet de modifier les bits de permission qui sont associés à un fichier.,Systèmes de fichiers,,,,
Comment est-ce que les bits de permission qui sont associés à un fichier sont-ils stocké ?,Ils sont encodés sous la forme d'un entier de 16 bits.,Systèmes de fichiers,,,,
Quels sont les 3 plus importants bits de permission ?,1. S_IRUSR (0x400) : Lecture par propriétaire µ 2. S_IWUSR (0x0200) : Ecriture par propriétaire µ 3. S_IXUSR (0x0100) : Exécution par propriétaire,Systèmes de fichiers,,,,
Comment est-ce que les bits de permisisons peuvent-ils être spécifiés en utilisant une notation logique ?,Exemple: Lecture et écriture par propriétaire µ S_IRUSR | S_IWUSR,Systèmes de fichiers,,,,
Comment est-ce que les bits de permisisons peuvent-ils être spécifiés en utilisant une notation numérique ?,Exemple: Lecture et écriture par propriétaire µ 00600,Systèmes de fichiers,,,,
Quelles sont les deux manières de spécifier un fichier dans UNIX ?,1. En utilisant le chemin complet depuis la racine µ 2. En utilisant leur nom relatif,Systèmes de fichiers,,,,
Qu'est ce que le noyau maintient qui permet d'utiliser le nom relatif d'un fichier pour le spécifier ?,Le noyau maintient dans sa table des processus le répertoire courant de chaque processus (= répertoire à partir duquel le processus à été lancé),Systèmes de fichiers,,,,
"Que fait l'appel système ""stat"" ?",Il récupère les méta-données associées à un fichier/répertoire,Systèmes de fichiers,,,,
"Que fait l'appel système ""utime"" ?",Il modifie les dates de création/modification d'un fichier,Systèmes de fichiers,,,,
"Que fait l'appel système ""rename"" ?",Il change de nom/d'emplacement,Systèmes de fichiers,,,,
"Que fait l'appel système ""rmdir"" ?",Détruire un répertoire,Systèmes de fichiers,,,,
"Que font les appels systèmes ""opendir""/""closedir""/""readdir"" ?",Consulter le contenu des répertoires,Systèmes de fichiers,,,,
"Quel type de structure est renvoyé par un appel à ""readdir"" ?","Une structure ""dirent"" (un pointer vers cette structure)",Systèmes de fichiers,,,,
"Quels sont les 5 éléments contenus dans une structure ""dirent"" ?",1. Le numéro de l'inode µ 2. La position de l'entrée dirent suivante µ 3. La longueur de l'entrée µ 4. Le type de l'entrée µ 5. Le nom de l'entrée,Systèmes de fichiers,,,,
"Est-ce que l'appel système ""readdir"" peut être utilisé dans une application multi-threadée ?",Non,Systèmes de fichiers,,,,
"Pourquoi est-ce que l'appel système ""readdir"" ne peut pas être utilisé dans une application multi-threadée ?",Car elle est non-réentrante et elle utilise une zone de mémoire statique pour stocker la structure retournée,Systèmes de fichiers,,,,
"Quel appel système devons-nous utiliser pour remplacer ""readdir"" dans une application multi-threadée ?","L'appel système ""readdir_r""",Systèmes de fichiers,,,,
Qu'est ce qu'un inode ?,C'est une structure de données utilisée pour stocker les informations d'un fichier sur un système de fichiers Unix.,Systèmes de fichiers,,,,
Quels sont les 6 informations stockées dans un inode ?,1. Taille du fichier µ 2. Droits d'accès µ 3. Dates de création et de modification µ 4. Propriétaire µ 5. Groupe propriétaire µ 6. Compteur de liens vers ce fichier,Systèmes de fichiers,,,,
Qu'est ce qu'un lien symbolique ?,Un lien symboliques peut être vu comme un raccourci vers un fichier ou un répertoire existant ou non.,Les différents types de liens,,,,
Est-ce que un lien symbolique est représenté par le même inode que le fichier/répertoire qu'il pointe ?,"Non, un lien symboliques est un fichier avec son propre inode.",Les différents types de liens,,,,
Comment est-ce que le système de fichiers accède à un fichier/répertoire via un lien symbolique ?,Il utilise la référence dans l'inode du lien symbolique pour trouver l'emplacement du fichier pointé. Puis il utilise l'inode du fichier pointé pour lire son contenu.,Les différents types de liens,,,,
Est-ce que un lien symbolique doit partager les mêmes permissions d'accès et la même date de modification que le fichier/répertoire vers lequel il pointer ?,Non un lien symbolique ne partage pas les mêmes informations que le fichier/répertoire vers lequel il pointe.,Les différents types de liens,,,,
Qu'est ce qu'un lien physique/dur ?,C'est une référence directe à un inode donné.,Les différents types de liens,,,,
Est-ce que un lien physique/dur partage forcément les mêmes informations que le fichier/répertoire vers lequel il pointe ?,Oui car il partage le même inode que le fichier/répertoire vers lequel il pointe.,Les différents types de liens,,,,
"Si on modifie un fichier pointé par plusieurs liens physiques/durs, est-ce que cela impacte ces liens ?","Oui, vu qu'ils utilisent le même inode que le fichier.",Les différents types de liens,,,,
Explique comment le compteur de liens évolue et ce qui arrive quand il à la valeur 0.,Il commence à 1. µ Si un lien physique/dur est créé il est incrémenté. µ Si un lien physique/dur est supprimé il est décrémenté. µ Si il atteint 0 le fichier peut être supprimé définitivement,Les différents types de liens,,,,
"Que fait l'appel système ""open"" ?",Il demande à l'OS l'autorisation d'accéder au contenu d'un fichier.,Utilisation des fichiers,,,,
"Lors de l'utilisation de l'appel système ""open"", à quoi correspond le flag ""O_RDONLY"" ?",Le fichier est ouvert pour des opérations de lecture,Utilisation des fichiers,,,,
"Lors de l'utilisation de l'appel système ""open"", à quoi correspond le flag ""O_WRONLY"" ?",Le fichier est ouvert pour des opérations d'écriture,Utilisation des fichiers,,,,
"Lors de l'utilisation de l'appel système ""open"", à quoi correspond le flag ""O_RDWR"" ?",Le fichier est ouvert pour des opérations de lecture et d'écriture,Utilisation des fichiers,,,,
A quoi correspond le descripteur de fichier -1 ?,"L'appel système ""open"" a échoué",Utilisation des fichiers,,,,
A quoi correspond le descripteur de fichier 0 ?,A l'entrée standard,Utilisation des fichiers,,,,
A quoi correspond le descripteur de fichier 1 ?,A la sortie standard,Utilisation des fichiers,,,,
A quoi correspond le descripteur de fichier 2 ?,A la sortie d'erreur standard,Utilisation des fichiers,,,,
Comment est-ce que l'OS sait quels fichiers on été ouverts ?,Il maintient une table de fichiers ouverts.,Utilisation des fichiers,,,,
Est-ce que un nombre illimité de fichiers peuvent être ouvert sur un système ?,"Non, le nombre de fichiers ouvert à la fois est limité, l'OS limite le nombre de descripteurs de fichiers.",Utilisation des fichiers,,,,
"Après l'ouverture d'un fichier, comment est-ce que l'OS sait où se trouve la tête de lecture/écriture pour ce fichier spécifique ?",Le noyau de l'OS maintient un offset pointer.,Utilisation des fichiers,,,,
"Quel drapeau passé à l'appel système ""open"" permet de définir l'offset pointer initial à la position juste après le dernier octet du fichier ?","Le drapeau ""O_APPEND""",Utilisation des fichiers,,,,
Quel appel système permet de lire un fichier ?,read,Utilisation des fichiers,,,,
Quel appel système permet d'écrire dans un fichier ?,write,Utilisation des fichiers,,,,
Quels sont les 2 problèmes qui peuvent arriver quand un fichier est écrit sur un ordinateur et lu sur un autre ?,1. Les entiers peuvent être représentés en 32bits sur un ordinateur et en 64bits sur l'autre. µ 2. Il n'y a pas de consensus sur la façon de représenter les entiers sur 16 et 32 bits de mémoire (big endian ou little endian),Utilisation des fichiers,,,,
Qu'est ce que Big Endian ?,"Pour l'entier 16bits : 0b1111111100000000 µ En big endian, le byte 11111111 sera stocké à l’adresse x et le byte 00000000 à l’adresse x+1",Utilisation des fichiers,,,,
Qu'est ce que Little Endian ?,"Pour l'entier 16bits : 0b1111111100000000 µ En little endian, c’est le byte 00000000 qui est stocké à l’adresse x et le byte 11111111 qui est stocké à l’adresse x+1.",Utilisation des fichiers,,,,
Qu'est ce qu'un signal ?,C'est une forme d'interruption logicielle,Signaux,,,,
Quels sont les 2 types de signaux ?,1. Synchrone µ 2. Asynchrone,Signaux,,,,
Qu'est ce qu'un signal synchrone ?,Signal qui a été directement causé par l’exécution d’une instruction du processus (ex: on essaye de diviser par 0).,Signaux,,,,
Qu'est ce qu'un signal asynchrone ?,Signal qui n’a pas été directement causé par l’exécution d’une instruction du processus. Il peut être produit par le système d’exploitation ou généré par un autre processus.,Signaux,,,,
Que permet l'interruption provoquée par un signal ?,Il permet au Kernel de prendre la main pour traiter l'événement externe ou pour demander le traitement d'un appel système.,Signaux,,,,
"Que fait l'appel système ""signal"" ?",Il permet de redéfinir le traitement d'un signal.,Signaux,,,,
Via quel appel système est-ce qu'un processus peut envoyer des signaux à d'autres processus ?,"Via l'appel système ""kill""",Signaux,,,,
"Quels sont les 2 arguments que prend l'appel système ""kill"" ?",1. Le PID du processus à qui envoyer le signal µ 2. Le type de signal à envoyer,Signaux,,,,
"Si on utilise l'appel système ""kill"" avec un PID > 0, que fera cet appel ?",Le signal est délivré au processus ayant comme identifiant ce PID,Signaux,,,,
"Si on utilise l'appel système ""kill"" avec un PID=0, que fera cet appel ?","Le signal est délivré à tous les processus qui font partie du même groupe de processus que le processus qui exécute l'appel système ""kill"".",Signaux,,,,
"Si on utilise l'appel système ""kill"" avec un PID=-1, que fera cet appel ?","Le signal est délivré à tous les processus pour lesquels le processus qui exécute l'appel système ""kill"" a les permissions suffissantes pour leur envoyer un signal.",Signaux,,,,
"Si on utilise l'appel système ""kill"" avec un PID < -1, que fera cet appel ?",Le signal est délivré à tous les processus qui font partie du groupe abs(PID),Signaux,,,,
Quel est de manière générale le traitement par défaut d'un signal ?,L'arrêt immédiat du processus.,Signaux,,,,
"Quels sont les 2 arguments que prend l'appel système ""signal"" ?",1. Le numéro du signal dont le traitement doit être modifié µ 2. La fonction à exécuter lorsque le signal est reçu,Signaux,,,,
"Quel second argument peut-on passer à l'appel système ""signal"" pour faire que le traitement d'un signal devienne le fait de l'ignorer ?",SIG_IGN,Signaux,,,,
A quoi correspond le signal SIGBUS ?,Erreur matérielle,Signaux,,,,
A quoi correspond le signal SIGTERM ?,Demander la fin du processus,Signaux,,,,
A quoi correspond le signal SIGKILL ?,Forcer la fin d'un processus,Signaux,,,,
A quoi correspond le signal SIGINT ?,Envoyé par le shell lorsque l'utilisateur presse CTRL+C,Signaux,,,,
"Lorsqu'un signal est envoyé à un processus, celui-ci lance une routine d'interruption. Quel est le nom de la fonction qui représente cette routine ?",sighandler,Signaux,,,,
Quel problème peut arriver dans un processus multi-threadé quand la fonction sighandler vient à être appelée ?,"Si un thread est occupé à modifier une structure, celui-ci sera mis en pause durant l’exécution de la fonction sighandler. La fonction sighandler peut cependant modifier la même structure que le thread modifiait et donc générer des incohérences liées à des modifications concurrentes",Signaux,,,,
Quelles sont les 6 précautions qui doivent être prises lors de l'écriture d'une fonction sighandler ?,"1. Manipuler variables avec précaution µ 2. Ne pas s'appuyer sur la Stack µ 3. N'utiliser que des variables globales µ 4. Déclarer les variables avec le mot clé ""volatile"" µ 5. Déclarer les variables avec le type ""sig_atomic_t"" µ 6. Utiliser que des fonctions réentrantes",Signaux,,,,
"Que garantit le type de variable ""sig_atomic_t"" ?",Le compilateur garantit que tous les accès à la variable se feront de façon atomique sans accès concurrent possible entre le processus et la fonction de traitement des signaux.,Signaux,,,,
Explique la stratégie qui consiste à traiter les signaux comme des notifications par l'OS/un processus à un autre processus.,"Chaque processus contient une file d'attente de signaux qui lui sont destinés. Le noyau gère cette file d'attente et gère aussi un tableau de pointers vers les fonctions de traitement pour chaque signal dans la file d'attente. Ce tableau est modifiable par l'appel système ""signal"". Chaque fois que le noyau réactive un processus il vérifie s'il y a des signaux dans la file d'attente associée à ce processus. Si il y a un signal présent, le noyau appelle la fonction de traitement du signal correspondant. Lorsque cette fonction de traitement est finie, l'exécution du processus reprend à l'instruction qui avait été interrompue.",Signaux,,,,
Explique la stratégie qui consiste à représenter l'ensemble des signaux qu'un processus peut recevoir sous forme de drapeaux binaires.,"On représente chaque signal pas un drapeau binaire. Lorsque l'appel ""kill"" est effectué il modifie le drapeau correspondant du processus cible sauf si le signal est ignoré par le processus. Le noyau gère un tableau de pointers vers les fonctions de traitement pour chaque signal dans la file d'attente. Ce tableau est modifiable par l'appel système ""signal"".",Signaux,,,,
Quel désavantage possède la stratégie qui consiste à représenter l'ensemble des signaux qu'un processus peut recevoir sous forme de drapeaux binaires ?,"Lorsque le noyau réactive un processus et vérifie les drapeaux relatifs aux signaux, il ne sait pas combien de signaux ont été envoyés depuis la dernière vérification. Il est possible qu'un signal ait été manqué et que le processus ne soit jamais informé de son arrivée.",Signaux,,,,
Quel est le système de fichier le plus couramment utilisé par les distributions Linux ?,ext4,Mise en oeuvre des systèmes de fichiers sous Unix,,,,
Par quel élément est-ce que chaque type de périphérique de stockage est-il géré ?,Par le gestionnaire de périphériques,Mise en oeuvre des systèmes de fichiers sous Unix,,,,
Que permet l'utilisation d'un driver de périphérique ?,L’utilisation d’un driver et de l’électronique de gestion embarquée du périphérique permet à l’OS de ne pas avoir à gérer directement le hardware. Ce mode de fonctionnement permet à l’OS de ne pas voir la structure spécifique du périphérique mais de voir une suite d’octets dont il peut se servir.,Mise en oeuvre des systèmes de fichiers sous Unix,,,,
"Quand on parle d'un disque, que comporte la zone de démarrage ?","Elle comporte les blocs de commencement qui stocke les métadonnées utiles pour sa gestion, notamment la liste des partitions qui sont présentes sur ce disque. Ce bloc de gestion est appelé boot control block.",Mise en oeuvre des systèmes de fichiers sous Unix,,,,
"Quand on parle d'un disque, a quoi servent les blocs de commencement ?",Ils sont lus au démarrage pour pouvoir amorcer les processus de démarrage. ,Mise en oeuvre des systèmes de fichiers sous Unix,,,,
Quel est le role du GRUB ?,Il s'occupe de décider quel disque va être utilisé pour démarre le système.,Mise en oeuvre des systèmes de fichiers sous Unix,,,,
"Quand on parle d'un disque, a quoi sert le bloc de partition ?",Bloc de contrôle qui a pour but de contenir les métadonnées nécessaires pour réaliser l'opération de montage du système de fichier contenu dans la partition.,Mise en oeuvre des systèmes de fichiers sous Unix,,,,
Comment est structuré un système de fichiers ?,"L'espace de stockage est découpé en blocs de taille identique. µ Un fichier occupe toujours un nombre de blocs entier. µ Pour chaque fichier, une liste contenant tous les blocs sur lesquels le fichier est stocké doit être maintenue. µ Des métadonnées régissent le contrôle d'accès (R, W, X). µ Une liste des blocs vides est conservée (pour des nouveaux fichiers / étendre des fichiers existants).",Mise en oeuvre des systèmes de fichiers sous Unix,,,,
Comment est structuré le système de fichiers FAT ?,Il y a une unique table d'allocation dédiée pour stocker les identifiants des blocs occupés par chaque fichier qui est stockée au début de la partition. µ Un fichier est identifié par un numéro qui est aussi son index dans la table. µ Chaque entrée de la table d'allocation contient les métadonnées et permet d'accéder à la liste des blocs de données.,Mise en oeuvre des systèmes de fichiers sous Unix,,,,
"Dans un système de fichiers FAT, quels sont les 2 problèmes qui peuvent arriver si on stocke un fichier sur des cellules contiguës ?",1. Fichier change de taille ==> Il faut déplacer toutes les cases qui le suivent. µ 2. Il peut y avoir des espaces libres entre chaque bloc.,Mise en oeuvre des systèmes de fichiers sous Unix,,,,
"Dans un système de fichiers FAT, quel est le problème qui peut arriver si on stocke un fichier sur des cellules pas forcément contiguës en utilisant une structure chaînée ?",La tête de lecture du disque dur va faire énormément de détours car l'unité de mémoire suivante ne se trouve pas forcément à la case suivante dans le tableau.,Mise en oeuvre des systèmes de fichiers sous Unix,,,,
Comment est-ce que le système de fichier FAT réserve les blocs lors de la création d'un fichier et lors de son extension ?,"Initialement le fichier est placé sur des zones contiguës et la table ne contient que l’identifiant du premier bloc. Dés qu'on étend le fichier, le dernier bloc de la zone peut contenir un pointeur vers une nouvelle zone dans le cas où le fichier croît au-delà de ce qui est possible en étendant le bloc existant.",Mise en oeuvre des systèmes de fichiers sous Unix,,,,
Que permet le défragmenteur ?,Le défragmenteur est un outil qui permet de déplacer les blocs d’un support de stockage pour augmenter la localité et réduire la fragmentation.,Défragmenteur,,,,
Qu'est ce que le stockage indexé ?,"Au lieu d'utiliser une table d'allocation, on utilise directement un bloc complet comme bloc d’index vers des blocs de données.",Défragmenteur,,,,
Quel est l'avantage d'utiliser l'approche de stockage indexé ?,Il n'est pas nécessaire de limiter à l'avance le nombre maximal de fichiers en choisissant une taile pour la table d'indexation.,Défragmenteur,,,,
Quel est le désavantage d'utiliser l'approche de stockage indexé ?,La taille d'un fichier est toujours augmentée d'un bloc.,Défragmenteur,,,,
Dans le système de fichiers ext4 que contiennent les inodes ?,Les métadonnées associées aux fichiers ainsi que la liste des blocs de données.,Défragmenteur,,,,
Dans le système de fichiers ext4 est-ce que les inodes sont toutes stockée au début de la partition ou ext4 utilise l'approche de stockage indexé ?,Le système de fichiers ext4 stocke toutes les inodes en début de partition.,Défragmenteur,,,,
Quelles sont 4 informations que contient un inode ?,1. Taille du fichier µ 2. Permissions d'accès µ 3. Date de dernière modification µ 4. Position des données sur le disque dur,Défragmenteur,,,,
Quels sont les 3 niveaux d'indirections dans un inode ?,1. simple µ 2. double µ 3. triple,Défragmenteur,,,,
Comment un inode distingue un fichier et un répertoire ?,"L'inode contient un flag ""d"", qui est vrai si l'inode représente un répertoire.",Défragmenteur,,,,
"Si un inode représente un répertoire, quelle structure contient-il ?","Il contient une structure ""dirent"".",Défragmenteur,,,,
"Quand un fichier est supprimé, quels éléments sont effectivement supprimés et quels éléments ne le sont pas ?","L'inode du fichier est supprimé. µ Les données du fichier ne sont pas supprimées, on déclare seulement que ces blocs sont libres.",Défragmenteur,,,,
Quel utilitaire permet de supprimer définitivement les blocs de données d'un fichier sur le disque (Linux) ?,"L'utilitaire ""shred""",Défragmenteur,,,,
"Au niveau du disque, comment un cache peut améliorer les performances d'un système de fichiers ?",Au niveau du disque (et/ou contrôleur de périphérique). Disposition d’un cache permettant de stocker un petit nombre d’opérations d’écriture en attente.,Défragmenteur,,,,
"Au niveau de la mémoire RAM, comment un cache peut améliorer les performances d'un système de fichiers ?",La mémoire (RAM) inutilisée sert comme cache pour les accès disques → page cache,Défragmenteur,,,,
Comment peut-on optimiser les demande d'accès au disque dans un cadre concurrent ?,On réordonne les demandes pour qu'elles soient ordonnées de manière à réduire l'effort mécanique entre chaque opération.,Défragmenteur,,,,
Qu'est ce que la journalisation ?,"Les opérations d’écriture sur le disque ne sont pas réalisées directement là où un bloc est stocké. À la place, une partie du disque est utilisée pour y écrire, dans l’ordre de leur arrivée, les modifications. Chaque modification est donc vue comme une transaction, et l’ensemble des transactions forme un journal. L’utilisation d’un système de fichiers journalisés améliore la performance mais aussi la robustesse. Si le disque est démonté brutalement ou perd son alimentation, il est possible de passer en revue le journal des transactions et de les appliquer de nouveau pour restaurer un état cohérent du système.",Défragmenteur,,,,